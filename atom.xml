<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yatsov的博客</title>
  
  <subtitle>学习-沉淀-提高</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yatsov.github.io/"/>
  <updated>2018-08-11T08:37:38.759Z</updated>
  <id>http://yatsov.github.io/</id>
  
  <author>
    <name>yatsov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GeoServer 的样式初体验</title>
    <link href="http://yatsov.github.io/geoserver/%E6%A0%B7%E5%BC%8F.html"/>
    <id>http://yatsov.github.io/geoserver/样式.html</id>
    <published>2018-08-11T02:52:07.000Z</published>
    <updated>2018-08-11T08:37:38.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GeoServer-的样式初体验"><a href="#GeoServer-的样式初体验" class="headerlink" title="GeoServer 的样式初体验"></a>GeoServer 的样式初体验</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>样式是<strong>肥肠</strong>重要的！对于地理信息的展示来说，不好看效果减半。那么我们现在来谈谈GeoServer的样式问题。</p></blockquote><p>GeoServer的样式主要包括以下四种：<br>1、Styled Layer Descriptor (SLD):一个OGC标准的地理空间样式。默认的。<br>Cascading Style Sheets (CSS): 一个类CSS语法。可以通过扩展获得。<br>YSLD:一种基于YAML的改进的SLD等价方法。可以通过ysld扩展获得。<br>MBStyle: 一种基于JSON的语法，用于改进互操作性。可通过mbtype分机获得。</p><h2 id="样式编辑页"><a href="#样式编辑页" class="headerlink" title="样式编辑页"></a>样式编辑页</h2><p>On the Styles page, you can add a new style, remove a style, or view or edit an existing style.<br>在样式编辑页中，你可以增加、删除、查看、或者编辑一个样式。<br><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles.png" alt=""></p><h3 id="添加一个样式"><a href="#添加一个样式" class="headerlink" title="添加一个样式"></a>添加一个样式</h3><p>如下图所示添加样式按钮就在页面的上方。<br><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_add_delete.png" alt=""><br>点击添加新样式按钮。你将会被转到新样式页面会有点像样式编辑页面。</p><p>编辑器提供了很多的选项用户创建一个样式：<br>1、<strong>Format</strong> 样式的格式<br>2、选择一个内部模板<br><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_generate.png" alt=""><br>3、<strong>Copy</strong> 选择一个已经存在的内容复制进来。<br><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_copy.png" alt=""><br>4、<strong>Upload</strong>选择一个本地文件。</p><p>创建样式时，只有数据选项卡可用。单击新样式上的Apply按钮让样式得以保存。</p><h3 id="删除一个Style"><a href="#删除一个Style" class="headerlink" title="删除一个Style"></a>删除一个Style</h3><p>删除样式的时候，在样式面板选择需要删除的样式，之后点击删除点击确定即可。</p><p><img src="https://raw.githubusercontent.com/yatsov/yatsov.github.io/master/staticResource/20180519_1.gif" alt=""></p><h3 id="样式编辑器"><a href="#样式编辑器" class="headerlink" title="样式编辑器"></a>样式编辑器</h3><p>点击样式进入样式编辑器。</p><p>样式编辑器表达了样式定义，这一页有四个tab框，内容如下：</p><p>Data : 包括基本的样式信息，生成样式的能力，以及图例细节。<br>Publishing : 让哪一个图层使用这个样式。<br>Layer Preview ： 预览相关联的图层。<br>Layer Attributes ：展示相关图层的样式。<br><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_tabs.png" alt=""></p><p>下面有四个按钮它们的作用是：</p><p>Validate  :验证目前样式的正确性;<br>Apply     :对样式进行更改，样式编辑器不动。这对于更新”图层预览”选项卡非常有用。<br>Submit    :对样式进行更改,返回到样式主页。<br>Cancel    :撤销样式更改,并返回到样式主页。</p><p><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_validate_buttons.png" alt=""></p><h3 id="样式定义区"><a href="#样式定义区" class="headerlink" title="样式定义区"></a>样式定义区</h3><p><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor.png" alt=""><br>这里负责书写样式，上面的五个按钮分别代表撤销、重做、调到指定的某行、改变编辑器的字体大小。</p><blockquote><p>写的时候可以Validate 查看一下正确性。</p></blockquote><h3 id="style-Data-区域"><a href="#style-Data-区域" class="headerlink" title="style Data 区域"></a>style Data 区域</h3><p><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_data_styledata.png" alt=""><br>包含三项<br>1、 Name   ：样式的名字<br>2、工作空间 ：这个样式仅在工作空间内有效，如果没写就是全局。<br>3、格式     :样式的格式。可选值为 SLD, CSS, and YSLD, MBStyle。</p><blockquote><p>注意：除了SLD后面的要安装扩展。</p></blockquote><h3 id="style-legend-区域"><a href="#style-legend-区域" class="headerlink" title="style legend 区域"></a>style legend 区域</h3><p><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_data_legend.png" alt=""></p><p>图例区域允许你增加、编辑、删除自定义的图例样式。GeoServer默认会为您生成一个样式文件，但是这个是可以自定义的。这个是可以自定义的：</p><p>Add legend          :允许你添加一个自定义图例<br>Online Resource  :自定义样式图的路径。可以是一个url或者一个文件相对路径。查看一下数据目录章节中的样式目录的描述<br>Auto-detect      :自动计算图像的宽度高度以及各式。<br>Width            :自定义图例的宽度<br>Height           :自定义图例的宽度<br>Format           :自定义图例的MIME类型<br>Discard legend   :丢弃图例并使用自己生成的图例。<br>Preview legend     :预览基于现在设置的图例</p><h3 id="Style-Editor-Layer-Preview-tab"><a href="#Style-Editor-Layer-Preview-tab" class="headerlink" title="Style Editor: Layer Preview tab"></a>Style Editor: Layer Preview tab</h3><p><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_data_layerpreview.png" alt=""><br>这里可以预览效果，GeoServer会找到一个他认为准确的图层来进行渲染，如果不是点击左上角预览图层更换一下图层。</p><h3 id="Style-Editor-Layer-Attributes-tab"><a href="#Style-Editor-Layer-Attributes-tab" class="headerlink" title="Style Editor: Layer Attributes tab"></a>Style Editor: Layer Attributes tab</h3><p><img src="http://112.74.52.111/geoserverhtmldoc/user/_images/styles_editor_data_layerattributes.png" alt=""><br>上面的图显示的是GeoServer中的属性展示tab，你在编辑样式的时候，需要针对某些属性值来进行判断那么这个时候可以参考这个页面。如果这里展示的页面不是你想要的那么点击预览图层换一个。<br>如果你需要查看图片上的最大最小值，那么点击Compute计算一下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个是样式的一个初步体验，下面还需要继续具体的介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GeoServer-的样式初体验&quot;&gt;&lt;a href=&quot;#GeoServer-的样式初体验&quot; class=&quot;headerlink&quot; title=&quot;GeoServer 的样式初体验&quot;&gt;&lt;/a&gt;GeoServer 的样式初体验&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="gis" scheme="http://yatsov.github.io/tags/gis/"/>
    
  </entry>
  
  <entry>
    <title>GeoServer 实现一个渲染变换(Rendering Transformation)</title>
    <link href="http://yatsov.github.io/geoserver/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B8%B2%E6%9F%93%E5%8F%98%E6%8D%A2.html"/>
    <id>http://yatsov.github.io/geoserver/实现一个渲染变换.html</id>
    <published>2018-08-11T02:52:07.000Z</published>
    <updated>2018-08-11T08:37:50.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个渲染变换-Rendering-Transformation"><a href="#实现一个渲染变换-Rendering-Transformation" class="headerlink" title="实现一个渲染变换(Rendering Transformation)"></a>实现一个渲染变换(Rendering Transformation)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>渲染转换是一种特殊的WPS过程，它运行在Geoserver WMS渲染管道中，对数据进行转换，以提供更有效的可视化。本节介绍如何在Java中实现呈现转换过程</p></blockquote><p>呈现转换非常通用，可以转换输入数据的内容和格式。内容转换通常涉及复杂的地理空间处理，需要访问整个数据集(与几何转换不同，几何学转换一次只对单个空间特征进行操作)。格式转换从矢量转换到栅格，反之亦然，以产生适合于所需可视化的输出格式(例如，用于显示连续曲面的瓦片，或用于显示离散对象的矢量数据)。</p><p>有关Geoserver中渲染转换功能的更多信息，请参阅Geoserver用户指南的渲染转换部分。</p><h2 id="渲染转换的生命周期"><a href="#渲染转换的生命周期" class="headerlink" title="渲染转换的生命周期"></a>渲染转换的生命周期</h2><p>要实现渲染转换，首先就要了解它在GeoServer中的生命周期以及执行的操作。一个渲染转换是在SLD中通过在<featuretypestyle>要素中声明 <transformation>要素完成的。这个元素(<transformation>)生命了转换过程的名称和值以及渲染参数。<br>下面是实现gs:Heatmap转换在SLD中声明的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;FeatureTypeStyle&gt;</span><br><span class="line">           &lt;Transformation&gt;</span><br><span class="line">             &lt;ogc:Function name=&quot;gs:Heatmap&quot;&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;data&lt;/ogc:Literal&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;weightAttr&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;pop2000&lt;/ogc:Literal&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;radiusPixels&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;ogc:Function name=&quot;env&quot;&gt;</span><br><span class="line">                   &lt;ogc:Literal&gt;radius&lt;/ogc:Literal&gt;</span><br><span class="line">                   &lt;ogc:Literal&gt;100&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;pixelsPerCell&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;10&lt;/ogc:Literal&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;outputBBOX&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;ogc:Function name=&quot;env&quot;&gt;</span><br><span class="line">                   &lt;ogc:Literal&gt;wms_bbox&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;outputWidth&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;ogc:Function name=&quot;env&quot;&gt;</span><br><span class="line">                   &lt;ogc:Literal&gt;wms_width&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;ogc:Function name=&quot;parameter&quot;&gt;</span><br><span class="line">                 &lt;ogc:Literal&gt;outputHeight&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;ogc:Function name=&quot;env&quot;&gt;</span><br><span class="line">                   &lt;ogc:Literal&gt;wms_height&lt;/ogc:Literal&gt;</span><br><span class="line">                 &lt;/ogc:Function&gt;</span><br><span class="line">               &lt;/ogc:Function&gt;</span><br><span class="line">             &lt;/ogc:Function&gt;</span><br><span class="line">           &lt;/Transformation&gt;</span><br></pre></td></tr></table></figure></transformation></transformation></featuretypestyle></p><p>在WMS请求中我们使用SLD来指定变换，所有的参数都是在SLD文档中指定的参数。一些参数值必须由SLD变量指定。参考上图。<br>在执行转换过程之前，可以通过可选的反向查询(invertQuery)或invertGridGeometry方法，将查询Geoserver所做的查询重写到源数据存储。这允许转换扩大查询范围，因为某些类型的转换可能需要包含位于原始查询窗口之外的数据。渲染变换是可以扩大查询范围的，因为某些类型的转换可能需要包含位于原始查询数据之外的数据。</p><p>然后对源数据存储执行查询，并对结果数据集执行转换过程。转换返回的数据集要么格式相同要么格式不同。如果坐标系和需求不一样还会被自动转换。最后，输出数据集通过渲染管道传递，由SLD的<featuretypestyle>中定义的符号符进行样式设置。</featuretypestyle></p><h2 id="转换过程类-Transformation-process-class"><a href="#转换过程类-Transformation-process-class" class="headerlink" title="转换过程类 (Transformation process class)"></a>转换过程类 (Transformation process class)</h2><p>和其它WPS过程类似，渲染转换的实现也是通过Java类的。一个服务过程(process)需要实现<strong>GSProcess marker</strong>接口。并且需要通过applicationContext.xml文件来注册到GeoServer中。另外如果需要了解更多关于如果构建以及如何注册等信息请参阅WPS服务构建章节(上一篇哦)。</p><p>WPS服务必须提供关于这个服务的元数据以及参数。最简单的方法是使用GeoTools annotation-based Process API,它使用了Java注解来指定元数据。例如，下面的代码展示了渲染变换(gs:Heatmap)元数据指定的过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@DescribeProcess(title = &quot;Heatmap&quot;,</span><br><span class="line">             description = &quot;Computes a heatmap surface over a set of irregular data points as a GridCoverage.&quot;)</span><br><span class="line">public class HeatmapProcess implements GeoServerProcess &#123;</span><br></pre></td></tr></table></figure><p>GeoServer对于每个渲染变换实现单个实例。这意味着呈现转换类必须是无状态的，使得我们可以通过调用他们来处理不同的请求。这是通过避免在类中声明任何实例变量来确保的。对于复杂的转换，可能需要实现一个辅助类，以允许使用实例变量。</p><blockquote><p>译者注：这里面的意思应该是每个WPS服务实现都是有一个类不会，那么在多线程情况下，如果里面有变量可能会是线程不安全的，所以变量建议通过别的类来存储，这样避免变量串了。</p></blockquote><h2 id="执行方法-execute-method"><a href="#执行方法-execute-method" class="headerlink" title="执行方法(execute method)"></a>执行方法(execute method)</h2><p>像所有的服务过程类(process classes)一样，一个渲染转换类必须实现一个执行方法，来教会GeoServer如何执行转换。执行方法的签名(DescribeResult、DescribeParameter)指定输入参数的类型和过程结果。</p><p>一个Heatmap变换的执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@DescribeResult(name = &quot;result&quot;, description = &quot;The heat map surface as a raster&quot;)</span><br><span class="line">public GridCoverage2D execute(</span><br><span class="line"></span><br><span class="line">  // tranformation input data</span><br><span class="line">  @DescribeParameter(name = &quot;data&quot;, description = &quot;Features containing the data points&quot;)</span><br><span class="line">    SimpleFeatureCollection obsFeatures,</span><br><span class="line"></span><br><span class="line">  // process parameters</span><br><span class="line">  @DescribeParameter(name = &quot;radiusPixels&quot;,</span><br><span class="line">                     description = &quot;Radius to use for the kernel, in pixels&quot;)</span><br><span class="line">    Integer argRadiusPixels,</span><br><span class="line">  @DescribeParameter(name = &quot;weightAttr&quot;,</span><br><span class="line">              description = &quot;Featuretype attribute containing the point weight value&quot;,</span><br><span class="line">                     min = 0, max = 1)</span><br><span class="line">     String valueAttr,</span><br><span class="line">  @DescribeParameter(name = &quot;pixelsPerCell&quot;,</span><br><span class="line">                     description = &quot;Number of pixels per grid cell (default = 1)&quot;,</span><br><span class="line">                     min = 0, max = 1)</span><br><span class="line">    Integer argPixelsPerCell,</span><br><span class="line"></span><br><span class="line">  // output map parameters</span><br><span class="line">  @DescribeParameter(name = &quot;outputBBOX&quot;,</span><br><span class="line">                     description = &quot;Georeferenced bounding box of the output&quot;)</span><br><span class="line">    ReferencedEnvelope argOutputEnv,</span><br><span class="line">  @DescribeParameter(name = &quot;outputWidth&quot;, description = &quot;Width of the output raster&quot;)</span><br><span class="line">    Integer argOutputWidth,</span><br><span class="line">  @DescribeParameter(name = &quot;outputHeight&quot;, description = &quot;Height of the output raster&quot;)</span><br><span class="line">    Integer argOutputHeight,</span><br><span class="line"></span><br><span class="line">  ) throws ProcessException &#123;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h2 id="输入参数-Input-parameters"><a href="#输入参数-Input-parameters" class="headerlink" title="输入参数(Input parameters)"></a>输入参数(Input parameters)</h2><p>一个受支持的输入参数是通过execute方法的参数传入的。元数据则是通过@DescribeParameter注解获取的。</p><p>要接受要转换的输入数据，过程必须定义一个输入参数，类型为SimpleFeatureCollection或GridCoverage2D。在GeoServer支持数据作为参数传入，来执行过程，但是需要指定上面所说的参数。可以定义任意数量的其他参数。参数可以是强制性的，也可以是可选的(如果不存在，可选参数的值为NULL)。可以通过定义数组值参数来接受值列表.</p><p>有些转换需要有关请求地图的范围和坐标系统的信息，并要求图像的宽度和高度。这些需要的情况包括：</p><p>1、转换操作依赖请求分辨率;<br>2、转换操作计算的是一个栅格结果，需要目标坐标系来达到一个最佳效果；</p><p>这些值可以从SLD预定义变量中获得，并通过ReferencedEncrype和Integer类型的参数传入。(有关所有可用预定义变量的详细信息，请参阅“用户指南”中的SLD部分中的变量替换。)</p><p>在Heatmap变换的情况下，请求分辨率会被用于整个数据范围内的像素半径参数，另外输出栅格也会在需要的坐标系下进行计算避免不被期望的投影。</p><p>为了支持这个变换需要定义outputBBOX、outputWidth以及outputHeight参数。这些是由预定义的SLD变量提供的，如上面SLD片段。</p><h2 id="变换输出-Transformation-output"><a href="#变换输出-Transformation-output" class="headerlink" title="变换输出(Transformation output)"></a>变换输出(Transformation output)</h2><p>变换的输出是一个新的( SimpleFeatureCollection 或者 GridCoverage2D类型的)数据集,返回类型需要在execute的返回类型中指定。名称以及元数据由execute方法的@DescribeResult注解负责提供。</p><p>如果输出数据集数据的坐标系与地图输出的坐标系不符，GeoServer将会自己动调整坐标。另外我们可以通过设置请求坐标系来解决避免自动转换（一定要明确坐标系）。</p><h2 id="查询重写-Query-rewriting"><a href="#查询重写-Query-rewriting" class="headerlink" title="查询重写(Query rewriting)"></a>查询重写(Query rewriting)</h2><p>如果需要，渲染转换有能力改变对源数据集的查询。允许扩展要读取的数据的范围，对于某些类型的转换（特别是通过计算围绕输入的空间窗口来确定结果的那些）是必要的。这也允许控制查询优化（例如，确保几何抽取不阻止点特征被读取）。</p><blockquote><p>译者注：我的理解就是读取的范围可以扩大或者精炼。</p></blockquote><p>查询重写是通过提供InvertQuery或invertGridGeometry方法来实现的。这些方法的一般签名是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">X invertX( [inputParam,]* Query targetQuery, GridGeometry targetGridGeometry)</span><br></pre></td></tr></table></figure></p><p>targetQuery参数是请求的查询构造体。</p><p>targetGridGeometry是被请求的输出地图的地理参考范围。他不会被用在数据查询汇总，但可能需要与转换参数一起使<br>用，以确定如何重写查询。例如，如果在输出单元中指定了参数，那么输出范围信息将该值转换为与输入CRS相适应的值。</p><blockquote><p>自己实现？</p></blockquote><p>此外，这些方法可以接受为执行方法定义的任意数量的输入参数。如果定义了这些参数，他们也必须通过@DescribeParameter参数在execute中进行注解。</p><h2 id="invertQuery方法"><a href="#invertQuery方法" class="headerlink" title="invertQuery方法"></a>invertQuery方法</h2><p>这个方法会在渲染变换处理矢量数据是调用（输入数据的类型是SimpleFeatureCollection）。</p><p>这个方法会返回一个新的查询值，包含了范围或查询优化所需的任何更改。它被用于查询资源数据集。</p><p>热力图渲染过程实现了invertQuery来增大查询范围。这个查询范围则是通过与radiusPixels参数相关的ground size决定的。</p><blockquote><p>The Heatmap process implements the invertQuery method in order to enlarge the query extent by the ground size corresponding to the radiusPixels parameter.<br>这句ground size是啥？</p></blockquote><p>为了允许将像素尺寸转换为ground distance，还需要提供输出地图范围的输入参数。所实现的方法的签名是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public Query invertQuery(</span><br><span class="line">        @DescribeParameter(name = &quot;radiusPixels&quot;,</span><br><span class="line">                       description = &quot;Radius to use for the kernel&quot;, min = 0, max = 1)</span><br><span class="line">          Integer argRadiusPixels,</span><br><span class="line">        // output image parameters</span><br><span class="line">        @DescribeParameter(name = &quot;outputBBOX&quot;,</span><br><span class="line">                       description = &quot;Georeferenced bounding box of the output&quot;)</span><br><span class="line">          ReferencedEnvelope argOutputEnv,</span><br><span class="line">        @DescribeParameter(name = &quot;outputWidth&quot;,</span><br><span class="line">                       description = &quot;Width of the output raster&quot;)</span><br><span class="line">          Integer argOutputWidth,</span><br><span class="line">        @DescribeParameter(name = &quot;outputHeight&quot;,</span><br><span class="line">                       description = &quot;Height of the output raster&quot;)</span><br><span class="line">          Integer argOutputHeight,</span><br><span class="line"></span><br><span class="line">        Query targetQuery, GridGeometry targetGridGeometry</span><br><span class="line">   ) throws ProcessException &#123;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h2 id="invertGridGeometry-方法"><a href="#invertGridGeometry-方法" class="headerlink" title="invertGridGeometry 方法"></a>invertGridGeometry 方法</h2><p>这个方法会在渲染栅格数据时（输入格式是GridCoverage2D）时被调用。该方法返回一个新的GridGeometry值，用作对源栅格数据集的查询范围。</p><h2 id="在总结"><a href="#在总结" class="headerlink" title="在总结"></a>在总结</h2><p>总结一下 ，渲染变换的重点是:</p><p>1、再输入的时候必须有个输入参数是FeatureCollection或者GridCoverage2D。<br>2、在输入参数中包含地图范围和图像尺寸是很有用的。<br>3、输出是必须有单一一个输出结果是FeatureCollection类型或者GridCoverage2D类型。<br>4、invertQuery和invertGridGeometry方法为可选项，可以被提供来重写数据查询。<br>5、注意渲染变换代码的无状态问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现一个渲染变换-Rendering-Transformation&quot;&gt;&lt;a href=&quot;#实现一个渲染变换-Rendering-Transformation&quot; class=&quot;headerlink&quot; title=&quot;实现一个渲染变换(Rendering Transfo
      
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="gis" scheme="http://yatsov.github.io/tags/gis/"/>
    
  </entry>
  
  <entry>
    <title>GeoServer中的WPS服务-1 如何发布一个WPS服务</title>
    <link href="http://yatsov.github.io/gis/GeoServer%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAWPS%E6%9C%8D%E5%8A%A1.html"/>
    <id>http://yatsov.github.io/gis/GeoServer如何发布一个WPS服务.html</id>
    <published>2018-05-06T02:52:07.000Z</published>
    <updated>2018-05-06T11:29:36.704Z</updated>
    
    <content type="html"><![CDATA[<p>下面对如何在GeoServer中进行发布一个WPS服务的英文文档进行实践，并将采坑之后的结果发布。<br><a id="more"></a></p><h2 id="WPS-服务"><a href="#WPS-服务" class="headerlink" title="WPS 服务"></a>WPS 服务</h2><p>WPS服务(Web Processing Service )用于做地理信息处理的服务规范。在GeoServer中又实现。需要安装WPS插件，具体请参照自己的版本去GeoServer官网下载，下载完成之后放到geoserver 的WEB-INF/lib 目录中，然后重启即可。</p><blockquote><p>下面的文章基本上是GeoServer上的文档的翻译，另外加上不同的版本以及采坑的注意事项。</p></blockquote><h2 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h2><p>1 、开头的第一步就是创建一个Maven的工程，我们叫他 hello_wps<br>2 、第二部找到或者添加pom.xml文件(这个根据你是手动写的还是Eclipse写的注意只要目录对就行)。<br>由于版本变化，原文档的仓库有两个包找不到，我从geotools 那边找到两个仓库，之后成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;org.geoserver&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;hello_wps&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;&lt;!-- jar包形式打包 --&gt;</span><br><span class="line">  &lt;version&gt;2.13.0&lt;/version&gt;&lt;!-- 这里貌似是geoserver的版本，，我之后还要测试 --&gt;</span><br><span class="line">  &lt;name&gt;hello_wps&lt;/name&gt;</span><br><span class="line"> &lt;properties&gt;</span><br><span class="line">     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">     &lt;gt.version&gt;18.0&lt;/gt.version&gt;  &lt;!--  GeoTools 对应的要使用的版本 --&gt;</span><br><span class="line">     &lt;gs.version&gt;2.13.0&lt;/gs.version&gt;  &lt;!-- GeoServer 要使用的版本 --&gt;</span><br><span class="line">   &lt;/properties&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.geotools&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;gt-process&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;gt.version&#125;&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.geoserver.extension&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;gs-wps-core&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;gs.version&#125;&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.geoserver&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;gs-main&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;gs.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;classifier&gt;tests&lt;/classifier&gt;</span><br><span class="line">       &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">       &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;com.mockrunner&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;mockrunner&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;0.3.6&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">   &lt;build&gt;</span><br><span class="line">     &lt;plugins&gt;</span><br><span class="line">       &lt;plugin&gt;</span><br><span class="line">         &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">         &lt;configuration&gt;</span><br><span class="line">           &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">           &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">         &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;boundless&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Boundless Maven Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://repo.boundlessgeo.com/main&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;repository&gt;&lt;!-- 额外的仓库 当上面的找不到的时候--&gt;</span><br><span class="line">            &lt;id&gt;osgeo&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Open Source Geospatial Foundation Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://download.osgeo.org/webdav/geotools/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">          &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;maven2-repository.dev.java.net&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Java.net repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://download.java.net/maven/2&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>3 、在<strong>src/main/java</strong> 目录下创建一个类 叫做<strong>HelloWPS.java</strong>。</p><blockquote><p>注意对应的包名和位置!!!</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//HelloWPS.java</span><br><span class="line">package org.geoserver.hello.wps;</span><br><span class="line"></span><br><span class="line">import org.geotools.process.factory.DescribeParameter;</span><br><span class="line">import org.geotools.process.factory.DescribeProcess;</span><br><span class="line">import org.geotools.process.factory.DescribeResult;</span><br><span class="line">import org.geoserver.wps.gs.GeoServerProcess;</span><br><span class="line"></span><br><span class="line">@DescribeProcess(title=&quot;helloWPS&quot;, description=&quot;Hello WPS Sample&quot;)</span><br><span class="line">public class HelloWPS implements GeoServerProcess &#123;</span><br><span class="line"></span><br><span class="line">   @DescribeResult(name=&quot;result&quot;, description=&quot;output result&quot;)</span><br><span class="line">   public String execute(@DescribeParameter(name=&quot;name&quot;, description=&quot;name to return&quot;) String name) &#123;</span><br><span class="line">        return &quot;Hello, &quot; + name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="准备注册"><a href="#准备注册" class="headerlink" title="准备注册"></a>准备注册</h2><p>在<strong>src/main/resources</strong>位置准备一个文件 <strong>applicationContext.xml</strong>内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">  &lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span><br><span class="line">  &lt;beans&gt;</span><br><span class="line">    &lt;bean id=&quot;helloWPS&quot; class=&quot;org.geoserver.hello.wps.HelloWPS&quot;/&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>运行命令</p><blockquote><p>mvn clean install</p></blockquote><p>找到编译好的jar包在target目录下的。然后将其复制到geoserver目录的/WEB-INF/lib中，然后在geoserver的/WEB-INF/dispatcher-servlet.xml 文件中也要写清楚上面的内容。</p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>之后打开GeoServer我们可以在WPS Request Builder模块中进行实验。如图:<br><img src="http://112.74.52.111/geoserverhtmldoc/developer/_images/helloWPS.png" alt=""></p><h2 id="接收和查看原始输入"><a href="#接收和查看原始输入" class="headerlink" title="接收和查看原始输入"></a>接收和查看原始输入</h2><p>基本Geoserver WPS体系结构的目的是将输入解码和输出编码集中到GeoServer中进行，让进程针对Java对象工作，并在注册新的匹配PPIO后立即为所有进程自动创建新的输入和输出类型。（也就是输入输出和其分离，但是这个鬼的输入输出类型是xml类型很不爽）</p><p>但是，也可以让流程同时接受原始输入和输出，并完成解析编码本身。这非常适合绑定到已经将解析和编码作为正常活动的外部网络或命令行工具。</p><p>原始输入和输出由RawData接口表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public interface RawData &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the mime type of the stream&apos;s contents</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String getMimeType();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Gives access to the raw data contents.</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * @throws FileNotFoundException</span><br><span class="line">     */</span><br><span class="line">    public InputStream getInputStream() throws IOException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Optional field for output raw data, used by</span><br><span class="line">     * WPS to generate a file extension</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String getFileExtension();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作为输入，RawData将提供给process，这将发现用户选择的mimeType，并将访问数据的原始输入流。作为输出，流程将返回一个RawData，WPS将查看结果将在哪些mimeType中，获得对原始内容的访问，并获取一个文件扩展名以构建用户文件下载的文件名。</p><p>使用RawData的流程还必须在注释中提供一些额外的元数据，以便声明支持哪些MIME类型，并允许流程知道在执行请求中选择了哪些输出MIME类型。<br>额外的注释mimeTypes和chosenMimeType放在结果和参数注释的元部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@DescribeResult(name = &quot;result&quot;, description = &quot;Output raster&quot;,</span><br><span class="line">                meta = &#123;&quot;mimeTypes=application/json,text/xml&quot;,</span><br><span class="line">                        &quot;chosenMimeType=outputMimeType&quot; &#125;)</span><br><span class="line">public RawData execute(</span><br><span class="line">        @DescribeParameter(name = &quot;data&quot;,</span><br><span class="line">                           meta = &#123; &quot;mimeTypes=text/plain&quot; &#125;)</span><br><span class="line">                           final RawData input,</span><br><span class="line">        @DescribeParameter(name = &quot;outputMimeType&quot;, min = 0)</span><br><span class="line">                           final String outputMimeType) &#123;</span><br></pre></td></tr></table></figure></p><p>The above instructs GeoServer WPS about raw data handling:<br>以上的结构是如何自己处理WPS服务的输入输出:</p><p>结果输出可以是application/json or text/xml，以application/json为默认值;<br>被用户选择的mime类型，将会被提供给WPS进行作为outputMimeType参数,而这个参数将隐藏在DescribeProcess输出中。<br>输入参数将被公告为支持text/plainMIME类型；</p><p>在构建RawData方面，如果需要，流程可以自由地创建自己的类，或者可以使用现有的FileRawData、StringRawData、StreamRawData实现之一。</p><p>下面是我根据上面测试成功的一个版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package org.geoserver.hello.wps;</span><br><span class="line"></span><br><span class="line">import org.geotools.process.factory.DescribeParameter;</span><br><span class="line">import org.geotools.process.factory.DescribeProcess;</span><br><span class="line">import org.geotools.process.factory.DescribeResult;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">import org.geoserver.wps.gs.GeoServerProcess;</span><br><span class="line"></span><br><span class="line">@DescribeProcess(title=&quot;helloWPS&quot;, description=&quot;Hello WPS Sample&quot;)</span><br><span class="line">public class HelloWPS implements GeoServerProcess &#123;</span><br><span class="line"></span><br><span class="line">public String convertStreamToString(InputStream is) &#123;   </span><br><span class="line">   BufferedReader reader = new BufferedReader(new InputStreamReader(is));   </span><br><span class="line">        StringBuilder sb = new StringBuilder();   </span><br><span class="line">        String line = null;   </span><br><span class="line">        try &#123;   </span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;   </span><br><span class="line">                sb.append(line + &quot;/n&quot;);   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125; catch (IOException e) &#123;   </span><br><span class="line">            e.printStackTrace();   </span><br><span class="line">        &#125; finally &#123;   </span><br><span class="line">            try &#123;   </span><br><span class="line">                is.close();   </span><br><span class="line">            &#125; catch (IOException e) &#123;   </span><br><span class="line">                e.printStackTrace();   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;   </span><br><span class="line">        return sb.toString();   </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@DescribeResult(name = &quot;result&quot;, description = &quot;Output raster&quot;, </span><br><span class="line">        meta = &#123;&quot;mimeTypes=application/json,text/xml&quot;,</span><br><span class="line">        &quot;chosenMimeType=outputMimeType&quot; &#125;)</span><br><span class="line">   public String execute(@DescribeParameter(name = &quot;data&quot;,</span><br><span class="line">   meta = &#123; &quot;mimeTypes=application/json&quot; &#125;,description=&quot;data to input&quot;)</span><br><span class="line">   final org.geoserver.wps.process.RawData input, @DescribeParameter(name = &quot;outputMimeType&quot;, min = 0)</span><br><span class="line">   final String outputMimeType) throws IOException &#123;</span><br><span class="line">        return this.convertStreamToString(input.getInputStream());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>WPS服务好烦人，通过XML解析。这里还要想办法解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面对如何在GeoServer中进行发布一个WPS服务的英文文档进行实践，并将采坑之后的结果发布。&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="gis GeoServer WPS" scheme="http://yatsov.github.io/tags/gis-GeoServer-WPS/"/>
    
  </entry>
  
  <entry>
    <title>GeTools中的JTS基础(2)</title>
    <link href="http://yatsov.github.io/gis/JTS%20%E5%9F%BA%E7%A1%80-2.html"/>
    <id>http://yatsov.github.io/gis/JTS 基础-2.html</id>
    <published>2018-05-06T02:52:07.000Z</published>
    <updated>2018-05-06T11:29:44.584Z</updated>
    
    <content type="html"><![CDATA[<p>介绍JTS的使用,是对GeoTools的一个翻译。针对Testing equality of Geometry objects页<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JTS包含着不同的判断Geometry对象是否相同的方法。如果你正在做大量的复杂的Geometry对象比较，那么了解不同的方法直接的区别会在你的应用运行时起到很大的帮助。</p><blockquote><p><strong>提示:如果这一页你觉得又臭又长,那么最终要的一点是永远避免使用Geometry.equals( Geometry g )。使用equalsExact 或 equalsTopo代替。</strong></p></blockquote><h2 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h2><h3 id="Geometry-equalsExact-Geometry-g"><a href="#Geometry-equalsExact-Geometry-g" class="headerlink" title="Geometry.equalsExact( Geometry g ):"></a>Geometry.equalsExact( Geometry g ):</h3><p>这个方法测试Geometry对象结构的相等。简单来说，这意味着它们必须有相同数量的顶点，在相同的位置和相同的顺序中。后一种情况是棘手的。如果两个多边形，相互比较，他们的定点相同但是两个顺序正好相反那么就会输出错误。了解这一点很重要，因为当对象存储在数据存储中并随后从数据存储中检索时，顶点顺序可能发生变化。</p><h3 id="Geometry-equalsExact-Geometry-g-double-tolerance"><a href="#Geometry-equalsExact-Geometry-g-double-tolerance" class="headerlink" title="Geometry.equalsExact( Geometry g, double tolerance )"></a>Geometry.equalsExact( Geometry g, double tolerance )</h3><p>这与前面的方法一样，但允许您为比较顶点坐标指定一个容差。</p><h3 id="Geometry-equalsNorm-Geometry-g"><a href="#Geometry-equalsNorm-Geometry-g" class="headerlink" title="Geometry.equalsNorm( Geometry g )"></a>Geometry.equalsNorm( Geometry g )</h3><p>这个方法让你从节点的顺序问题中解放了出来，通过几何对象的规范化(即，将每一种形式变成标准或规范形式在比较之前)。它与下面是相等的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geomA.normalize();</span><br><span class="line">geomB.normalize();</span><br><span class="line">boolean result = geomA.equalsExact( geomB );</span><br></pre></td></tr></table></figure><p>它能够保证顺序一致，但是代价是昂贵的需要额外计算。</p><h3 id="Geometry-equalsTopo-Geometry-g"><a href="#Geometry-equalsTopo-Geometry-g" class="headerlink" title="Geometry.equalsTopo( Geometry g )"></a>Geometry.equalsTopo( Geometry g )</h3><pre><code>This method tests for topological equality which is equivalent to drawing the two Geometry objects and seeing if all of their component edges overlap. It is the most robust kind of comparison but also the most computationally expensive.</code></pre><p>Geometry.equals( Object o )<br>    This method is a synonym for Geometry.equalsExact and lets you use Geometry objects in Java Collections.<br>Geometry.equals( Geometry g )</p><pre><code>This method is a synonym for Geometry.equalsTopo. It should really come with a health warning because its presence means that you can unknowingly be doing computationally expensive comparisons when quick cheap ones are all you need. For example:Geometry geomA = ...Geometry geomB = ...// If geomA and geomB are complex, this will be slow:boolean result = geomA.equals( geomB );// If you know that a structural comparison is all you need, do// this instead:result = geomA.equalsExact( geomB );The best thing approach you can take with this method is vow never to use it.</code></pre><h3 id="待完成………"><a href="#待完成………" class="headerlink" title="待完成……….."></a>待完成………..</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍JTS的使用,是对GeoTools的一个翻译。针对Testing equality of Geometry objects页&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="gis" scheme="http://yatsov.github.io/tags/gis/"/>
    
  </entry>
  
  <entry>
    <title>GeoServer如何在Tomcat中进行跨域</title>
    <link href="http://yatsov.github.io/gis/%E5%85%B3%E4%BA%8ETomcat%E5%A6%82%E4%BD%95%E8%B7%A8%E5%9F%9F%E4%BB%A5%E5%8F%8AGeoserver%E5%A6%82%E4%BD%95%E5%9C%A8Tomcat%E4%B8%AD%E8%BF%9B%E8%A1%8C%E8%B7%A8%E5%9F%9F.html"/>
    <id>http://yatsov.github.io/gis/关于Tomcat如何跨域以及Geoserver如何在Tomcat中进行跨域.html</id>
    <published>2018-05-02T07:28:00.000Z</published>
    <updated>2018-05-02T08:02:13.179Z</updated>
    
    <content type="html"><![CDATA[<p>此处介绍了GeoServer如何在Tomcat中进行跨域<br><a id="more"></a></p><h2 id="GeoServer-的跨域"><a href="#GeoServer-的跨域" class="headerlink" title="GeoServer 的跨域"></a>GeoServer 的跨域</h2><p>GeoServer是一款Java系的地理信息服务器，功能强大，但是默认是war包安装的时候没有设置跨域有时候ajax是无法请求道图层数据的所以这里要进行跨域的设置。</p><blockquote><p>这里一定要注意一点！！！！！Tomcat的跨域设置和Jetty的跨域设置时不同的，类名不同的。而Geoserver的文档里写的容器默认是jetty，所以如果里面需要什么关于java容器的设置请自己再查一下对应的自己的容器是咋回事！！！切记。</p></blockquote><h2 id="Tomcat容器设置"><a href="#Tomcat容器设置" class="headerlink" title="Tomcat容器设置"></a>Tomcat容器设置</h2><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#CORS_Filter/Introduction" target="_blank" rel="noopener">Tomcat官方配置文档</a></p><h3 id="CORS-Filter"><a href="#CORS-Filter" class="headerlink" title="CORS Filter"></a>CORS Filter</h3><p>他的原理是在HttpServletResponse对象中添加了Access-Control-*头。这个筛选器还保护了HTTP拆分。如果请求有问题或者不允许那么会返回403 (Forbidden)。下面介绍了配置项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>下面是几个initialisation parameters(init-param)(初始化参数)</p><h4 id="cors-allowed-origins"><a href="#cors-allowed-origins" class="headerlink" title="cors.allowed.origins"></a>cors.allowed.origins</h4><p>允许访问资源的起源列表。可以指定一个<em>以允许从任何来源访问资源。否则，可以提供逗号分隔的白名单。<br>例如: <a href="http://www.w3.org" target="_blank" rel="noopener">http://www.w3.org</a>, <a href="https://www.apache.org" target="_blank" rel="noopener">https://www.apache.org</a>.<br>默认: </em> (谁都行).</p><h4 id="cors-allowed-methods"><a href="#cors-allowed-methods" class="headerlink" title="cors.allowed.methods"></a>cors.allowed.methods</h4><p>这个用于控制请求的方法，这些方法也会包含在Access-Control-Allow-Methods头中。<br>例如: GET, POST.<br>默认: GET, POST, HEAD, OPTIONS</p><h4 id="cors-allowed-headers"><a href="#cors-allowed-headers" class="headerlink" title="cors.allowed.headers"></a>cors.allowed.headers</h4><p>这个用于控制请求头中所带的项，这个也会在预请求中作为Access-Control-Allow-Headers头的内容。<br>例如: Origin,Accept.<br>默认: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers</p><h4 id="cors-exposed-headers"><a href="#cors-exposed-headers" class="headerlink" title="cors.exposed.headers"></a>cors.exposed.headers</h4><p>这里面存着允许被暴露来的HTTP请求头，在Access-Control-Expose-Headers头中会显示。<br>例如: X-CUSTOM-HEADER-PING,X-CUSTOM-HEADER-PONG.<br>默认: None. Non-simple headers are not exposed by default.</p><h4 id="cors-preflight-maxage"><a href="#cors-preflight-maxage" class="headerlink" title="cors.preflight.maxage"></a>cors.preflight.maxage</h4><p>这个用秒计时，用于浏览器来缓存预请求的结果。这个会被包含在预请求结果的Access-Control-Max-Age头中。一个复制会阻止缓存。</p><p>默认: 1800</p><h4 id="cors-support-credentials"><a href="#cors-support-credentials" class="headerlink" title="cors.support.credentials"></a>cors.support.credentials</h4><p>是否支持缓存用户凭据，他在 Access-Control-Allow-Credentials头中被暴露出来。它帮助浏览器确定是否可以使用凭据来进行实际请求</p><p>默认: true</p><h4 id="cors-request-decorate"><a href="#cors-request-decorate" class="headerlink" title="cors.request.decorate"></a>cors.request.decorate</h4><p>要控制是否应该向HttpServletRequest对象添加CORS特定属性的标志。<br>Defaults: true</p><p>下面是一个完整的例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;cors.allowed.origins&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;*&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;cors.allowed.methods&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;GET,POST,HEAD,OPTIONS,PUT&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;cors.allowed.headers&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;cors.exposed.headers&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;cors.support.credentials&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;cors.preflight.maxage&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;10&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为geoserver配置跨域只要在他的app下面的web.xml里面修改web.xml即可注意一定要按照自己得容器规则修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此处介绍了GeoServer如何在Tomcat中进行跨域&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="gis" scheme="http://yatsov.github.io/tags/gis/"/>
    
  </entry>
  
  <entry>
    <title>关于Openlayers与React的结合 2 --如何处理Map</title>
    <link href="http://yatsov.github.io/gis/Openlayers%E4%B8%8EReact%E7%BB%93%E5%90%882.html"/>
    <id>http://yatsov.github.io/gis/Openlayers与React结合2.html</id>
    <published>2018-04-30T02:52:07.000Z</published>
    <updated>2018-04-30T03:38:29.503Z</updated>
    
    <content type="html"><![CDATA[<p>这是我进行设计React-Openlayers 框架的设计记录，也是对React学习的记录<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>上一个笔记，达到的目的是初步学会了如何初步打包一个Openlayers和React结合的框架。下一步就是开始准备进行结构设计，因为这个是对Openlayers的一个在封装，React更倾向于一个单项数据传播流动。而React里面的思维Openlayers的结构并不是很类似（据我目前的理解。）<br>所以现在开始设计，首先要考虑的问题就是Map对象，Map对象是OL中的一个全局对象必须要保证他的全局存在。或者说在React组件中他是一个能够被所有组件读到的对象。这里我使用React的context对象解决问题。</p><h2 id="React-context"><a href="#React-context" class="headerlink" title="React context"></a>React context</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>React 的context主要是用于缩短React 的父组件到需要传递的组件之间的路径的。比如说，样式信息就没有必要一层一层传递下去，使用context对象就可以避免这样的问题。</p><blockquote><p>不要因为怕麻烦所以就直接使用context对象。请坚持只有在同一个数据在多个层级多个组件使用的时候才应该使用context。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line">class Children extends React.Component &#123; </span><br><span class="line">  // 如果不需要在构造函数中使用可以不写，没有影响 </span><br><span class="line">  constructor(props, context) &#123; </span><br><span class="line">    super(props, context); </span><br><span class="line">    console.log(context); </span><br><span class="line">  &#125; </span><br><span class="line">  render() &#123; </span><br><span class="line">    return &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&#123;&apos;default context is: &apos; + this.context.value&#125;&lt;/li&gt; </span><br><span class="line">      &lt;/ul&gt;; </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line">Children.contextTypes = &#123;//contextTypes</span><br><span class="line">   value: PropTypes.string </span><br><span class="line">&#125;; </span><br><span class="line">  </span><br><span class="line">class Parent extends React.Component &#123; </span><br><span class="line">    getChildContext() &#123; </span><br><span class="line">      return &#123; value: &apos;parent&apos; &#125;; </span><br><span class="line">    &#125; </span><br><span class="line">    render() &#123; </span><br><span class="line">      return ( &lt;div&gt; &#123;this.props.children&#125; &lt;/div&gt; ); </span><br><span class="line">    &#125; </span><br><span class="line"> &#125; </span><br><span class="line">Parent.childContextTypes = &#123; </span><br><span class="line">value: PropTypes.string </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上是一个简单的代码示例在父元素设置getChildContext并在组件中设置childContextTypes进行校验。如果不设置校验那么对象会返回空。</p><blockquote><p>注意 ：官网文档用法有些差异可能是已经变化，但是经过测试上面的用法也没问题，另外我觉得还是上面的用法正常一些。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// Context 使得我们能够向组件树中的任意组件传递信息并不需要逐级传递</span><br><span class="line">//下面的例子是传递一个当前主题(light是当前主题值)</span><br><span class="line">const ThemeContext = React.createContext(&apos;light&apos;);</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 使用一个Provider来向下传递</span><br><span class="line">//任何组件可以读取到这个值，无论他多深。</span><br><span class="line">    // In this example, we&apos;re passing &quot;dark&quot; as the current value.</span><br><span class="line">    return (</span><br><span class="line">      &lt;ThemeContext.Provider value=&quot;dark&quot;&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;/ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// A component in the middle doesn&apos;t have to</span><br><span class="line">// pass the theme down explicitly anymore.</span><br><span class="line">function Toolbar(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ThemedButton /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ThemedButton(props) &#123;</span><br><span class="line">  // Use a Consumer to read the current theme context.</span><br><span class="line">  // React will find the closest theme Provider above and use its value.</span><br><span class="line">  // In this example, the current theme is &quot;dark&quot;.</span><br><span class="line">  return (</span><br><span class="line">    &lt;ThemeContext.Consumer&gt;</span><br><span class="line">      &#123;theme =&gt; &lt;Button &#123;...props&#125; theme=&#123;theme&#125; /&gt;&#125;</span><br><span class="line">    &lt;/ThemeContext.Consumer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getChildContext 函数将会在每次state或者props改变时调用。为了更新context中的数据，使用 this.setState触发本地状态的更新。这将触发一个的context并且数据的改变可以被子元素收到。</p></blockquote><h2 id="代码实现关键点"><a href="#代码实现关键点" class="headerlink" title="代码实现关键点"></a>代码实现关键点</h2><h3 id="1-构造器"><a href="#1-构造器" class="headerlink" title="1 构造器"></a>1 构造器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">       super(props);</span><br><span class="line">       console.log(&quot;BASE Olbasemap&quot;);</span><br><span class="line">       this.map = new ol.Map(&#123;</span><br><span class="line">           // target: &apos;map&apos;,</span><br><span class="line">           layers: [</span><br><span class="line">               new ol.layer.Tile(&#123;</span><br><span class="line">                   source: new ol.source.OSM()</span><br><span class="line">               &#125;)</span><br><span class="line">           ],</span><br><span class="line">           view: new ol.View(&#123;</span><br><span class="line">               center: ol.proj.fromLonLat([37.41, 8.82]),</span><br><span class="line">               zoom: 4,</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-componentDidMount"><a href="#2-componentDidMount" class="headerlink" title="2 componentDidMount"></a>2 componentDidMount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">        console.log(&quot;BASE componentDidMount&quot;);</span><br><span class="line">        this.map.setTarget(&quot;map&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>componentDidMount在首次render之后执行，当构造函数中确认了map对象之后在渲染完dom节点之后才可以将map对象与dom节点绑定。</p><h3 id="3-Context对象"><a href="#3-Context对象" class="headerlink" title="3 Context对象"></a>3 Context对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getChildContext() &#123;</span><br><span class="line">        console.log(&quot;BASE getChildContext&quot;);</span><br><span class="line">        return &#123;</span><br><span class="line">            value: &apos;parent&apos;,</span><br><span class="line">            map: this.map</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map.childContextTypes = &#123;</span><br><span class="line">    value: PropTypes.string,</span><br><span class="line">    map: PropTypes.instanceOf(ol.Map)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Context 对象及其校验</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天解决了map对象的问题为后面的组件设计打下了基础。之后将对图层的组织以及事件的组织进行设计。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我进行设计React-Openlayers 框架的设计记录，也是对React学习的记录&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="GIS" scheme="http://yatsov.github.io/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 404页面的修改</title>
    <link href="http://yatsov.github.io/Tomcat/Tomcat404%E9%A1%B5%E9%9D%A2%E4%BF%AE%E6%94%B9.html"/>
    <id>http://yatsov.github.io/Tomcat/Tomcat404页面修改.html</id>
    <published>2018-04-24T02:52:07.000Z</published>
    <updated>2018-04-24T16:06:40.836Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat 404页面的修改<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要是讲解，Tomcat的404页面修改以及404页面的要点。因为Tomcat原本的404页面不是很友好所以需要修改一下。</p><h2 id="修改404页面配置"><a href="#修改404页面配置" class="headerlink" title="修改404页面配置"></a>修改404页面配置</h2><p>1 请转到配置文件  ${TOMCAT_HOME}/conf/web.xml在上面使用以下代码 error-code 代表代码location 代表位置 这个位置是每个应用的位置，经过我的测试，也就是说每个应用内的代码如果出现404则会在这个页面的根目录里面寻找error404.html文件输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">............省略</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">&lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">&lt;location&gt;/error404.html&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h2 id="404页面的特点"><a href="#404页面的特点" class="headerlink" title="404页面的特点"></a>404页面的特点</h2><p>404页面的特点很简单，简洁明了，能够表达清楚意思，提供转到响应页面的连接即可。</p><p><img src="media/20180424_01.png" alt="404页面"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat 404页面的修改&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yatsov.github.io/categories/server/"/>
    
    
      <category term="Tomcat" scheme="http://yatsov.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>如何绘制一个8等分的圆CSS实现</title>
    <link href="http://yatsov.github.io/CSS/%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E5%85%AB%E7%AD%89%E5%88%86%E7%9A%84%E5%9C%86CSS%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://yatsov.github.io/CSS/如何绘制一个八等分的圆CSS实现.html</id>
    <published>2018-04-23T03:55:00.000Z</published>
    <updated>2018-04-23T03:58:23.803Z</updated>
    
    <content type="html"><![CDATA[<p> 对于CSS的练习介绍如何绘制八等分的圆。<br><a id="more"></a></p><p># </p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于CSS的练习介绍如何绘制八等分的圆。</p><h2 id="问题1-主要思路"><a href="#问题1-主要思路" class="headerlink" title="问题1 主要思路"></a>问题1 主要思路</h2><p>这个地方的主要思路是将一个八等分的圆分成两部分。左边和右边的圆分别用半圆旋转而得。</p><blockquote><p>1 注意：每个半圆最后要用外面的外包矩形切一下 详见#lfet #right<br>2 右边旋转的圆顺序不一样后面的可能会遮挡前面的要么顺序要对，要么使用z-index</p></blockquote><h2 id="问题2-重点代码"><a href="#问题2-重点代码" class="headerlink" title="问题2 重点代码"></a>问题2 重点代码</h2><h3 id="1-半圆和圆"><a href="#1-半圆和圆" class="headerlink" title="1 半圆和圆"></a>1 半圆和圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.circle-left&#123;</span><br><span class="line">           width: 100px;height: 200px;</span><br><span class="line">           border-radius: 0px 100px 100px 0px;</span><br><span class="line">           position: absolute;</span><br><span class="line">           right: 0;</span><br><span class="line">           transform-origin: 0 50%;</span><br><span class="line">       &#125;</span><br><span class="line">       .circle-right&#123;</span><br><span class="line">           width: 100px;height: 200px;</span><br><span class="line">           border-radius:  100px 0px 0px 100px ;</span><br><span class="line">           position: absolute;</span><br><span class="line">           right: 0;</span><br><span class="line">           transform-origin: 100% 50%;</span><br><span class="line">       &#125;</span><br><span class="line">       #circle0&#123;</span><br><span class="line">           width: 200px;height: 200px;</span><br><span class="line">           border-radius: 100px;background-color: yellowgreen;</span><br><span class="line">           position: relative;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>上面采用的是border-radius实现圆和半圆</p><h3 id="2-将半圆切整齐"><a href="#2-将半圆切整齐" class="headerlink" title="2 将半圆切整齐"></a>2 将半圆切整齐</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#left&#123;</span><br><span class="line">            clip: rect(0px 100px 200px 0px);</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用clip属性将其切整齐</p><blockquote><p>clip只有一种值rect(a,b,c,d)</p></blockquote><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CSS等分圆&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        .circle-left&#123;</span><br><span class="line">            width: 100px;height: 200px;</span><br><span class="line">            border-radius: 0px 100px 100px 0px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            transform-origin: 0 50%;</span><br><span class="line">        &#125;</span><br><span class="line">        .circle-right&#123;</span><br><span class="line">            width: 100px;height: 200px;</span><br><span class="line">            border-radius:  100px 0px 0px 100px ;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            transform-origin: 100% 50%;</span><br><span class="line">        &#125;</span><br><span class="line">        #circle0&#123;</span><br><span class="line">            width: 200px;height: 200px;</span><br><span class="line">            border-radius: 100px;background-color: yellowgreen;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">         #circle2&#123;</span><br><span class="line">            background-color: #70f3ff;</span><br><span class="line">        &#125;</span><br><span class="line">         #circle3&#123;</span><br><span class="line">            background-color: #ff461f;</span><br><span class="line">            transform: rotate(45deg);</span><br><span class="line">        &#125;</span><br><span class="line">        #circle4&#123;</span><br><span class="line">            background-color: #bce672;</span><br><span class="line">            transform: rotate(90deg);</span><br><span class="line">        &#125;</span><br><span class="line">        #circle5&#123;</span><br><span class="line">            background-color: #ffffff;</span><br><span class="line">            transform: rotate(135deg);</span><br><span class="line">        &#125;</span><br><span class="line">         #circle6&#123;</span><br><span class="line">            background-color: #3b2e7e;</span><br><span class="line">            transform: rotate(180deg);</span><br><span class="line">        &#125;</span><br><span class="line">         #circle7&#123;</span><br><span class="line">            background-color: #ff2121;</span><br><span class="line">            transform: rotate(225deg);</span><br><span class="line">        &#125;</span><br><span class="line">         #circle8&#123;</span><br><span class="line">            background-color: #16a951;</span><br><span class="line">            transform: rotate(270deg);</span><br><span class="line">        &#125;</span><br><span class="line">        #circle9&#123;</span><br><span class="line">            background-color: #e0eee8;</span><br><span class="line">            transform: rotate(315deg);</span><br><span class="line">        &#125;</span><br><span class="line">        #left&#123;</span><br><span class="line">            clip: rect(0px 100px 200px 0px);</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        #right&#123;</span><br><span class="line">            clip: rect(0px 100px 200px 0px);</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;circle0&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;left&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;circle-left&quot; id=&quot;circle2&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle-left&quot; id=&quot;circle3&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle-left&quot; id=&quot;circle4&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle-left&quot; id=&quot;circle5&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;circle-right&quot; id=&quot;circle9&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle-right&quot; id=&quot;circle8&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle-right&quot; id=&quot;circle7&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle-right&quot; id=&quot;circle6&quot;&gt;&lt;/div&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="img/20180423_1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 对于CSS的练习介绍如何绘制八等分的圆。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yatsov.github.io/categories/front-end/"/>
    
    
      <category term="CSS" scheme="http://yatsov.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于Openlayers与React的结合--第一个组件</title>
    <link href="http://yatsov.github.io/gis/Openlayers%E4%B8%8EReact%E7%BB%93%E5%90%88.html"/>
    <id>http://yatsov.github.io/gis/Openlayers与React结合.html</id>
    <published>2018-04-23T02:52:07.000Z</published>
    <updated>2018-04-23T04:14:26.744Z</updated>
    
    <content type="html"><![CDATA[<p>下面是我对如何将Openlayers与React结合上面的记录<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>下面是我对如何将Openlayers与React结合上面的记录</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React采用一个组件化的思想帮助前端进行工程化。所有的对象要内置在每个组件中，可以使用状态或者属性存储。简要代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">class Olbasemap extends React.Component&#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        let map = new ol.Map(&#123;</span><br><span class="line">              target: &apos;map&apos;,</span><br><span class="line">              layers: [</span><br><span class="line">                new ol.layer.Tile(&#123;</span><br><span class="line">                   source: new ol.source.OSM()</span><br><span class="line">                &#125;)</span><br><span class="line">              ],</span><br><span class="line">              view: new ol.View(&#123;</span><br><span class="line">                center: ol.proj.fromLonLat([37.41, 8.82]),</span><br><span class="line">                zoom: 4,</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div id=&quot;map&quot;&gt;&lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Olbasemap;</span><br></pre></td></tr></table></figure></p><p>以上是组件化代码，根据生命周期在render html之后再生成对象</p><blockquote><p>组件生命周期:componentWillMount–&gt;render–&gt;componentDidMount</p></blockquote><h2 id="问题1：webpack组件打包巨慢"><a href="#问题1：webpack组件打包巨慢" class="headerlink" title="问题1：webpack组件打包巨慢"></a>问题1：webpack组件打包巨慢</h2><h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1 :"></a>解决方法1 :</h3><p>将ol单独拆开不合并入webpack打包代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;学习&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;link href=&quot;/node_modules/openlayers/css/ol.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">            *&#123;</span><br><span class="line">                margin:0;</span><br><span class="line">                padding:0;</span><br><span class="line">            &#125;</span><br><span class="line">            #root&#123;</span><br><span class="line">                width:calc(100%);</span><br><span class="line">                height:calc(100%);</span><br><span class="line">            &#125;</span><br><span class="line">            #map&#123;</span><br><span class="line">                width:100%;</span><br><span class="line">                height:100%;</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;node_modules/openlayers/dist/ol-debug.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2 :"></a>解决方法2 :</h3><p>在打包配置是过滤掉不需要检索的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const resolve = require(&apos;path&apos;).resolve;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./index.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;./dist&apos;),</span><br><span class="line">    filename: &apos;bundle.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: &quot;source-map&quot;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(js|jsx)$/,</span><br><span class="line">        use: &apos;babel-loader&apos;,</span><br><span class="line">        exclude:/node_modules////&lt;--这里</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="问题2-React-is-not-defined"><a href="#问题2-React-is-not-defined" class="headerlink" title="问题2 :React is not defined"></a>问题2 :React is not defined</h2><p>在使用无状态组件时应该引入react</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://raw.githubusercontent.com/yatsov/yatsov.github.io/master/_img/20180423_1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是我对如何将Openlayers与React结合上面的记录&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="GIS" scheme="http://yatsov.github.io/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>翻译 如何居中</title>
    <link href="http://yatsov.github.io/CSS/%E7%BF%BB%E8%AF%91-%E5%A6%82%E4%BD%95%E5%B1%85%E4%B8%AD.html"/>
    <id>http://yatsov.github.io/CSS/翻译-如何居中.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T11:07:14.540Z</updated>
    
    <content type="html"><![CDATA[<p> 翻译 如何居中<br><a id="more"></a></p><blockquote><p>对这篇文章的翻译<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">https://css-tricks.com/centering-css-complete-guide/</a></p></blockquote><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="内联元素？文字或者链接"><a href="#内联元素？文字或者链接" class="headerlink" title="内联元素？文字或者链接?"></a>内联元素？文字或者链接?</h3><p>在块级元素内你可以将内联元素水平居中通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.center-children &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/2/1.png" alt="水平居中"></p><p>这些在inline, inline-block, inline-table, inline-flex中起作用</p><h3 id="块级元素居中"><a href="#块级元素居中" class="headerlink" title="块级元素居中"></a>块级元素居中</h3><p>对于块级元素你可以设置 margin-left 和 margin-right为auto(注意要有宽度，没有宽度的话会占满全部空间)一般用法为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.center-me &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/img/2/2.png" alt="水平居中"></p><p>对于父节点和本身来说宽度没有要求。<br>如果是float居中一种方案就是使用绝对定位之后left:50%然后再用margin:-图片的宽度的一半将其拉回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            width: auto;height: 100px;background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line">        img&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            position: absolute;left: 50%;margin-left: -100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=&quot;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;3.png&quot; style=&quot;&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="多个块级元素"><a href="#多个块级元素" class="headerlink" title="多个块级元素?"></a>多个块级元素?</h3><p>如果您有两个或更多的块级元素需要在一行中水平居中，那么您可能会更好地使其成为不同的显示类型。<br>以下是使它们成为内联块的示例以及flexbox的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*内联居中 */</span><br><span class="line">.inline-block-center &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">/* flex居中 */</span><br><span class="line">.flex-center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设你还有多个块级元素从上向下叠加，那么使用margin技术居中也是可以的。</p><h1 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h1><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素?"></a>内联元素?</h2><h3 id="一行"><a href="#一行" class="headerlink" title="一行?"></a>一行?</h3><p>有时候一行元素可以垂直居中，因为他们的上下padding一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.link &#123;</span><br><span class="line">  padding-top: 30px;</span><br><span class="line">  padding-bottom: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果padding不是选项，并且这个文字<strong>不会换行</strong>，那么您可以考虑一下line-height和高度相等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.center-text-trick &#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多行？"><a href="#多行？" class="headerlink" title="多行？"></a>多行？</h3><p>在多行情况下，上下相等padding也可以实现居中效果。但是如果他不奏效那么有可能是因为他是一个table-cell元素或者是被拆开仿佛像一个但是不是。vertical-align可以起到作用不像原有的效果他可以处理一列上的居中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;高度自适应布局&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background: #f06d06;</span><br><span class="line">  font-size: 80%;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line">  background: white;</span><br><span class="line">  width: 240px;</span><br><span class="line">  border-collapse: separate;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  height: 250px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table td &#123;</span><br><span class="line">  background: black;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 10px solid white;</span><br><span class="line">  /* default is vertical-align: middle; */</span><br><span class="line">&#125;</span><br><span class="line">.center-table &#123;</span><br><span class="line">  display: table;</span><br><span class="line">  height: 250px;</span><br><span class="line">  background: white;</span><br><span class="line">  width: 240px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.center-table p &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  margin: 0;</span><br><span class="line">  background: black;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 10px solid white;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">      I&apos;m vertically centered multiple lines of text in a real table cell.</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div class=&quot;center-table&quot;&gt;</span><br><span class="line">  &lt;p&gt;I&apos;m vertically centered multiple lines of text in a CSS-created table layout.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>如果出现了需要类似表格的布局那么，flexbox更好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: flex;</span><br><span class="line">            background-color: #C2FF21;</span><br><span class="line">            justify-content:  space-around;</span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line">.item&#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            background-color: #0067FF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意以上在有给定高度的时候管用。如果以上方法都不奏效那么请在里面加一个给定元素然后对它居中。</p><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="是否知道宽高"><a href="#是否知道宽高" class="headerlink" title="是否知道宽高"></a>是否知道宽高</h3><p>不知道网页布局的高度是很常见的，原因很多：如果宽度改变，文本重排可以改变高度。 文字造型的差异可以改变高度。 文字数量的变化可以改变高度。 具有固定宽高比的元素（如图像）可在更改大小时更改高度。 等等。<br>但是如果知道高度可以这样居中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  height: 100px;</span><br><span class="line">  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如果不知道高度"><a href="#如果不知道高度" class="headerlink" title="如果不知道高度"></a>如果不知道高度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translateY(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h3><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><p>###给定宽高？<br>那么使用left,top 50%之后之后使用负的margin将其拉回即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  padding: 20px;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line"></span><br><span class="line">  margin: -70px 0 0 -170px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="如果宽高不给定"><a href="#如果宽高不给定" class="headerlink" title="如果宽高不给定"></a>如果宽高不给定</h3><p>如果宽高不给定那么使用  transform: translate(-50%, -50%);注意这个的外元素也要有高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flexbox-1"><a href="#flexbox-1" class="headerlink" title="flexbox"></a>flexbox</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 翻译 如何居中&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yatsov.github.io/categories/front-end/"/>
    
    
      <category term="CSS" scheme="http://yatsov.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS 实现堆排序</title>
    <link href="http://yatsov.github.io/algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yatsov.github.io/algorithm/堆排序.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T10:08:26.124Z</updated>
    
    <content type="html"><![CDATA[<p>JS 实现堆排序<br><a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先堆是一个二叉树，分为最大堆和最小堆。最大堆是代表每个父节点大于子节点，最小堆相反。在排序中堆是一个完全二叉树。<br>里面涉及了几个公式：</p><h3 id="几个公式"><a href="#几个公式" class="headerlink" title="几个公式"></a>几个公式</h3><p>一个二叉树完全二叉树他的节点计算公式为<br>parent(i) = floor(i/2);<br>ileft(i)=2i;<br>iright(i)=2i+1;<br>而数组中公式则是有变化<br>parent(i) = floor((i-1)/2);<br>ileft(i)=2i+1;<br>iright(i)=2(i+1);</p><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><p>首先先进行最大堆调整，之后将最大堆的顶部也就是最大的数挪到尾部。之后堆的大小缩小1，之后继续进行最大堆调整重复上面的步骤。</p><h3 id="最大堆的实现"><a href="#最大堆的实现" class="headerlink" title="最大堆的实现"></a>最大堆的实现</h3><p>注意下面的代码最大堆的实现就是从最后一个节点的父节点开始调整每颗子树当调整到头位置是调整完毕。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//首先堆排序的时候的堆就是一个二叉树是一个完全二叉树</span><br><span class="line">//首选第一个问题 就是构造最大或者最小堆</span><br><span class="line">//这个问题要从底向上一点点的交换</span><br><span class="line">//然后看公式</span><br><span class="line">//一个二叉树完全二叉树他的节点计算公式为</span><br><span class="line">//parent(i) = floor(i/2);</span><br><span class="line">//ileft(i)=2i;</span><br><span class="line">//iright(i)=2i+1;</span><br><span class="line">//而数组中公式则是有变化</span><br><span class="line">//parent(i) = floor((i-1)/2);</span><br><span class="line">//ileft(i)=2i+1;</span><br><span class="line">//iright(i)=2(i+1);</span><br><span class="line">//有了公式之后的思路就变得简单了</span><br><span class="line">// 首先找到最后一个节点之后找到他的父节点之后开始在这颗树里面调整最大堆之后一步步向前推进即可这样最大堆构建完成</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">function getMaxHeap(array,i,heapSize) &#123;</span><br><span class="line">    var imax,ileft,iright;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        imax=i;</span><br><span class="line">        ileft=2*i+1;</span><br><span class="line">        iright=2*(i+1);</span><br><span class="line">        if (iLeft&lt;heapSize &amp;&amp; array[i]&lt;array[ileft])&#123;</span><br><span class="line">            imax=ileft;</span><br><span class="line">        &#125;</span><br><span class="line">        if (iright&lt;heapSize &amp;&amp; array[i]&lt;array[right])&#123;</span><br><span class="line">            imax=iright;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 从 index 开始检查并保持最大堆性质</span><br><span class="line"> * @array</span><br><span class="line"> * @index 检查的起始下标</span><br><span class="line"> * @heapSize 堆大小</span><br><span class="line"> **/</span><br><span class="line">function maxHeapify(array, index, heapSize) &#123;</span><br><span class="line">    var iMax, iLeft, iRight;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        iMax = index;</span><br><span class="line">        iLeft = 2 * index + 1;</span><br><span class="line">        iRight = 2 * (index + 1);</span><br><span class="line">        if (iLeft &lt; heapSize &amp;&amp; array[index] &lt; array[iLeft]) &#123;</span><br><span class="line">            iMax = iLeft;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (iRight &lt; heapSize &amp;&amp; array[iMax] &lt; array[iRight]) &#123;</span><br><span class="line">            iMax = iRight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (iMax != index) &#123;</span><br><span class="line">            swap(array, iMax, index);</span><br><span class="line">            index = iMax;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function swap(array, i, j) &#123;</span><br><span class="line">    var temp = array[i];</span><br><span class="line">    array[i] = array[j];</span><br><span class="line">    array[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function buildMaxHeap(array, heapSize) &#123;</span><br><span class="line">    var i,iParent = Math.floor((heapSize - 1) / 2);//找寻最后一个节点的父元素</span><br><span class="line">    for (i = iParent; i &gt;= 0; i--) &#123;</span><br><span class="line">        maxHeapify(array, i, heapSize);</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function heap_sort(arr) &#123;</span><br><span class="line">    buildMaxHeap(arr,arr.length);</span><br><span class="line">    for (let i = arr.length-1; i &gt;0; i--) &#123;</span><br><span class="line">        swap(arr,0,i);</span><br><span class="line">        buildMaxHeap(arr,i);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var elements = [3, 1, 5, 7, 2, 4, 9, 6, 10, 8];</span><br><span class="line">console.log(heap_sort(elements));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS 实现堆排序&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yatsov.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://yatsov.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Nginx环境安装及基本命令</title>
    <link href="http://yatsov.github.io/Nginx/Nginx%20Windows%20%E7%8E%AF%E5%A2%83%E4%B8%8B%20%E5%AE%89%E8%A3%85%EF%BC%8C%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.html"/>
    <id>http://yatsov.github.io/Nginx/Nginx Windows 环境下 安装，简介以及基本命令.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T11:00:50.716Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx环境安装及基本命令<br><a id="more"></a></p><h1 id="Nginx-Windows-环境-安装，简介，以及基本命令"><a href="#Nginx-Windows-环境-安装，简介，以及基本命令" class="headerlink" title="Nginx Windows 环境 安装，简介，以及基本命令"></a>Nginx Windows 环境 安装，简介，以及基本命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Windows 下的Nginx 解压到某处之后，对conf文件夹下的配置文件进行配置（端口），之后使用命令行打开即可。</p><h2 id="文件夹简介"><a href="#文件夹简介" class="headerlink" title="文件夹简介"></a>文件夹简介</h2><p>如图Nginx包含以下目录<br><img src="img/1-1.png" alt=""></p><p><strong>conf</strong>  : 存放Nginx的配置文件</p><p><strong>contrib</strong>   : 存放一些工具</p><p><strong>docs</strong>: 存放一些Nginx的文档资料</p><p><strong>html</strong>: 存放了两个静态的网页</p><p><strong>logs</strong>: 日志文件</p><p><strong>temp</strong>: 存放一些缓存数据</p><p><strong>nginx.exe</strong>: nginx主程序</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>Nginx的开启方式为，将命令行转到Nginx.exe 所在目录下，之后运行命令行即可。常用命令行如下：</p><blockquote><p>start nginx 打开Nginx<br>nginx -s stop 快速关闭，不保存相关信息。<br>nginx -s quit 完全有序关闭Nginx并保存相关信息<br>nginx -s reload 配置信息改变时重新载入<br>nginx -s reopen 重新打开日志<br>nginx -v 查看版本</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx环境安装及基本命令&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yatsov.github.io/categories/server/"/>
    
    
      <category term="nginx" scheme="http://yatsov.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>前端绘制地图中的地理坐标到屏幕坐标转换的简单思路--放大、缩小、移动</title>
    <link href="http://yatsov.github.io/algorithm/JS%E5%89%8D%E7%AB%AF%E7%BB%98%E5%88%B6%E5%9C%B0%E5%9B%BE%E6%80%9D%E8%B7%AF%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://yatsov.github.io/algorithm/JS前端绘制地图思路实现.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T10:09:28.547Z</updated>
    
    <content type="html"><![CDATA[<p>前端绘制地图中的地理坐标到屏幕坐标转换的简单思路–放大、缩小、移动。目的是解决前端绘制地图中存在的问题。<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了让自己熟悉地图的绘制，我想手绘一个地图如何绘制的工具。使用了zrender库，这是一个canvas库，Echart基于此做。数据的来源则是一个geojson文件。下面就要解决一下如何进行绘制的问题包括：<br>1、地理坐标如何与屏幕坐标转换。<br>2、如何放大、缩小。<br>3、如何移动。</p><h2 id="问题1-地理坐标系与屏幕坐标系如何进行转换"><a href="#问题1-地理坐标系与屏幕坐标系如何进行转换" class="headerlink" title="问题1 地理坐标系与屏幕坐标系如何进行转换"></a>问题1 地理坐标系与屏幕坐标系如何进行转换</h2><p>这里面我们是读取一个矢量数据在地图上绘制出来，思路如下：<br>0、明确浏览器坐标系是屏幕坐标系原点在左上角，地理坐标系原点是坐标系的原点。<br>1、找到屏幕坐标系的方框和地理坐标系的方框，找到屏幕坐标系的高度和地理坐标系的高度计算缩放比。</p><blockquote><p>注：这里的缩放比，我是按照简单的思路来的，其实应该是选择最小的那个，然后将坐标挪到中间。</p></blockquote><p>2、有了缩放比之后就明确了，地理坐标系和屏幕坐标系之间的缩放关系，之后开始计算地理坐标系在屏幕上的坐标。如图根据此点到左边的距离和到顶部的距离之后乘以缩放参数就会得到此点的屏幕坐标。<br><img src="1/1.png" alt="如何从地理坐标计算到屏幕坐标"><br>3、转换完屏幕坐标之后就可以绘制了。如果初始时有默认的缩放级别参照下面的缩放算一下就行。</p><h2 id="问题2-如何放到缩小"><a href="#问题2-如何放到缩小" class="headerlink" title="问题2 如何放到缩小"></a>问题2 如何放到缩小</h2><h3 id="1-如何确定放大缩小系数"><a href="#1-如何确定放大缩小系数" class="headerlink" title="1 如何确定放大缩小系数"></a>1 如何确定放大缩小系数</h3><p>这里使用了mousewheel事件直接绑定在了zrender对象上。这里要处理的是<strong>缩放系数</strong>缩放系数也就是放大和缩小的倍数。 使用evt.wheelDelta参数大于0代表放大小于0代表缩小。通过这样计算出缩放系数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x = evt.offsetX;</span><br><span class="line">var y = evt.offsetY;//距离容器</span><br><span class="line">var scalefactor = 1.2;</span><br><span class="line">evt.wheelDelta = evt.wheelDelta ? evt.wheelDelta : (evt.deltalY * (-40));  //获取当前鼠标的滚动情况</span><br><span class="line">if (evt.wheelDelta &gt; 0) &#123;</span><br><span class="line">            scalefactor *= 2;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">            scalefactor /= 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>参考 <a href="http://www.zhangxinxu.com/wordpress/2013/04/js-mousewheel-dommousescroll-event/" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/2013/04/js-mousewheel-dommousescroll-event/</a></p></blockquote><h3 id="2-如何放大缩小"><a href="#2-如何放大缩小" class="headerlink" title="2 如何放大缩小"></a>2 如何放大缩小</h3><p>这里面的思路是：<br>1、直接将地理信息数据每个坐标乘以放大系数得到新的坐标但是这个坐标是向外扩展的，所以还要纠正回去、<br>2、计算鼠标缩放的原点的坐标与缩放之后的原点坐标的差值，作为纠正值，向原点纠正纠正之后放大缩小完成。</p><h2 id="问题3-如何移动"><a href="#问题3-如何移动" class="headerlink" title="问题3 如何移动"></a>问题3 如何移动</h2><p>主要思路 :<br>1、 使用事件mouseup和mousedown。<br>2、 计算两个事件的坐标差然后将数据坐标计算即可。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="1/2.gif" alt="如何从地理坐标计算到屏幕坐标"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>效果简单但是还有很大的提升空间,解决了主要的问题剩下的还可以精进。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&apos;手动实现的一个小地图&apos;</span><br><span class="line">function CanvasMap(render,mapdata)&#123;</span><br><span class="line">    this.render = render;</span><br><span class="line">    this.mapdata=mapdata;</span><br><span class="line">    this.bound = this.returnMinXY(mapdata);</span><br><span class="line">    console.log(mapdata,this.bound)</span><br><span class="line">    var _my = this;</span><br><span class="line">    var x1,y1,x2,y2;</span><br><span class="line">    this.render.on(&quot;mousedown&quot;,function(evt)&#123;</span><br><span class="line">        x1 = evt.offsetX;</span><br><span class="line">        y1 = evt.offsetY;</span><br><span class="line">    &#125;);</span><br><span class="line">    this.render.on(&quot;mouseup&quot;,function(evt)&#123;</span><br><span class="line">        x2 = evt.offsetX;</span><br><span class="line">        y2 = evt.offsetY;</span><br><span class="line">        var xfactor = x2-x1;</span><br><span class="line">        var yfactor = y2-y1;</span><br><span class="line">        _my.render.clear();</span><br><span class="line">        _my.move(_my.mapdata,xfactor,yfactor);</span><br><span class="line">        for (var i=0;i&lt;_my.mapdata.features.length;i++)&#123;</span><br><span class="line">            _my.addgeometry(_my.mapdata.features[i],false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    this.render.on(&quot;mousewheel&quot;,function(evt)&#123;</span><br><span class="line">        //  console.log(evt);</span><br><span class="line">        var x = evt.offsetX;</span><br><span class="line">        var y = evt.offsetY;//距离容器</span><br><span class="line">        var scalefactor = 1.2;</span><br><span class="line">        evt.wheelDelta = evt.wheelDelta ? evt.wheelDelta : (evt.deltalY * (-40));  //获取当前鼠标的滚动情况</span><br><span class="line">        if (evt.wheelDelta &gt; 0) &#123;</span><br><span class="line">            scalefactor *= 2;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            scalefactor /= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(evt.wheelDelta)</span><br><span class="line">        var sx = scalefactor*x;</span><br><span class="line">        var sy = scalefactor*y;</span><br><span class="line">        var sdisx =sx-x;</span><br><span class="line">        var sdisy = sy-y;</span><br><span class="line">        _my.sacle(_my.mapdata,scalefactor,sdisx,sdisy);</span><br><span class="line">        _my.render.clear();</span><br><span class="line">        for (var i=0;i&lt;_my.mapdata.features.length;i++)&#123;</span><br><span class="line">            _my.addgeometry(_my.mapdata.features[i],false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;一个geojson文件的对象&#125; obj </span><br><span class="line"> */</span><br><span class="line">CanvasMap.prototype.returnMinXY=function(obj)&#123;</span><br><span class="line">    var factor = 20;</span><br><span class="line">    var features = obj.features,feature = null,coor = null;</span><br><span class="line">    var t = features[0].geometry.coordinates;</span><br><span class="line">    var minx=t[0][0][0],miny=t[0][0][1],maxx=t[0][0][0],maxy=t[0][0][1];</span><br><span class="line">    for (var z=0;z&lt;features.length;z++)&#123;</span><br><span class="line">        feature=features[z];</span><br><span class="line">        coor = feature.geometry.coordinates;</span><br><span class="line">        for (var i=0;i&lt;coor.length;i++)&#123;</span><br><span class="line">            for (var j=0;j&lt;coor[i].length;j++)&#123;</span><br><span class="line">                var coo = coor[i][j];</span><br><span class="line">                if (minx &gt;coo[0]  )&#123;</span><br><span class="line">                    minx = coo[0];</span><br><span class="line">                &#125;</span><br><span class="line">                if (maxx &lt;coo[0])&#123;</span><br><span class="line">                    maxx = coo[0];</span><br><span class="line">                &#125;</span><br><span class="line">                if (miny &gt;coo[1])&#123;</span><br><span class="line">                    miny = coo[1];</span><br><span class="line">                &#125;</span><br><span class="line">                if (maxy &lt;coo[1])&#123;</span><br><span class="line">                    maxy = coo[1];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        minx:minx,</span><br><span class="line">        miny:miny,</span><br><span class="line">        maxx:maxx,</span><br><span class="line">        maxy:maxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 坐标转换</span><br><span class="line"> * 函数思路是这个样子的</span><br><span class="line"> * 首先找出这里面的最左上角的坐标</span><br><span class="line"> * 之后minx maxy</span><br><span class="line"> * 之后算出点坐标与 左上角点的距离也就是曼哈顿距离 dx dy </span><br><span class="line"> * 之后把距离扩大扩大的factor为宽度的比</span><br><span class="line"> * @param &#123;*&#125; geometry </span><br><span class="line"> * @param &#123;*&#125; bound </span><br><span class="line"> */</span><br><span class="line">CanvasMap.prototype.changecoordinate = function(geometry,bound)&#123;</span><br><span class="line">  // 获取外界矩形</span><br><span class="line">  var factor = 400/(bound.maxy-bound.miny);//获取外边界</span><br><span class="line">  var minx=bound.minx,miny=bound.miny,maxx=bound.maxx,maxy=bound.maxy;</span><br><span class="line">  // //获得了外接矩形</span><br><span class="line"></span><br><span class="line">  var coor = geometry.coordinates;</span><br><span class="line">  var disx = 0,disy = 0;</span><br><span class="line">  for (var i=0;i&lt;coor.length;i++)&#123;</span><br><span class="line">      for (var j=0;j&lt;coor[i].length;j++)&#123;</span><br><span class="line">          var coo =  coor[i][j];</span><br><span class="line">         disx = coo[0]-minx;</span><br><span class="line">         disy = maxy - coo[1];</span><br><span class="line">         coor[i][j][0]=disx*factor;</span><br><span class="line">         coor[i][j][1]=disy*factor;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CanvasMap.prototype.addgeometry = function(data,change)&#123;</span><br><span class="line">    var bound = this.bound;</span><br><span class="line">    var geometry = [];</span><br><span class="line">    if (change!=false)&#123;</span><br><span class="line">        this.changecoordinate(data.geometry,bound);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var polygon = new zrender.Polygon(&#123;</span><br><span class="line">        shape: &#123;</span><br><span class="line">            points:data.geometry.coordinates[0]</span><br><span class="line">        &#125;,</span><br><span class="line">        style: &#123;</span><br><span class="line">            fill: &apos;none&apos;,</span><br><span class="line">            stroke: &apos;#c93756&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    this.render.add(polygon);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;*&#125; data </span><br><span class="line"> * @param &#123;*&#125; xfactor </span><br><span class="line"> * @param &#123;*&#125; yfactor </span><br><span class="line"> */</span><br><span class="line">CanvasMap.prototype.move=function(data,xfactor,yfactor)&#123;</span><br><span class="line">    console.log(&quot;move !!!!!!&quot;)</span><br><span class="line">    for (var i=0;i&lt;data.features.length;i++)&#123;</span><br><span class="line">        var feature = data.features[i];</span><br><span class="line">        movesingle(feature.geometry,xfactor,yfactor);</span><br><span class="line">    &#125;</span><br><span class="line">    function movesingle (geometry,xfactor,yfactor)&#123;</span><br><span class="line">        var coor = geometry.coordinates;</span><br><span class="line">        var disx = 0,disy = 0;</span><br><span class="line">        for (var i=0;i&lt;coor.length;i++)&#123;</span><br><span class="line">            for (var j=0;j&lt;coor[i].length;j++)&#123;</span><br><span class="line">                coor[i][j][0]=coor[i][j][0]+xfactor;</span><br><span class="line">                coor[i][j][1]=coor[i][j][1]+yfactor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 放大</span><br><span class="line"> */</span><br><span class="line">CanvasMap.prototype.sacle = function(data,scalefactor,sdisx,sdisy)&#123;</span><br><span class="line">    for (var i=0;i&lt;data.features.length;i++)&#123;</span><br><span class="line">        var feature = data.features[i];</span><br><span class="line">        scalesingle(feature.geometry,scalefactor,sdisx,sdisy);</span><br><span class="line">    &#125;</span><br><span class="line">    function scalesingle (geometry,scalefactor)&#123;</span><br><span class="line">        var coor = geometry.coordinates;</span><br><span class="line">        var disx = 0,disy = 0;</span><br><span class="line">        for (var i=0;i&lt;coor.length;i++)&#123;</span><br><span class="line">            for (var j=0;j&lt;coor[i].length;j++)&#123;</span><br><span class="line">                coor[i][j][0]=coor[i][j][0]*scalefactor-sdisx;</span><br><span class="line">                coor[i][j][1]=coor[i][j][1]*scalefactor-sdisy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端绘制地图中的地理坐标到屏幕坐标转换的简单思路–放大、缩小、移动。目的是解决前端绘制地图中存在的问题。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yatsov.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://yatsov.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS地图发布与数据切片</title>
    <link href="http://yatsov.github.io/arcobject/ArcGIS%E5%9C%B0%E5%9B%BE%E5%8F%91%E5%B8%83%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E6%96%87%E6%A1%A3.html"/>
    <id>http://yatsov.github.io/arcobject/ArcGIS地图发布与数据切片文档.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T11:10:28.476Z</updated>
    
    <content type="html"><![CDATA[<p>ArcGIS地图发布与数据切片<br><a id="more"></a></p><blockquote><p>下面介绍如何发布ArcGIS Server服务并对其进行切片</p></blockquote><h2 id="地图发布"><a href="#地图发布" class="headerlink" title="地图发布"></a>地图发布</h2><p>在发布服务之前首先要对地图服务按照标准进行数据整备，当一个MXD文档中的地图数据整备完毕之后就可以将，MXD文档发布为ArcGIS地图服务了。步骤如下：</p><p>1、首先点击 文件（File） (Share As) 服务Service 进入发布对话框</p><p><img src="media/3d75313d5a20cd8bd8becc0310517892.png" alt=""></p><p>图6.1</p><p>2、这里有三个选项<br>1）发布服务，如果是第一次发布就选择这个。2）发布为服务定义文件。3）覆盖一个已经存在的服务，如果是要覆盖原来的服务重新发布则选择这个。根据您的需要进行选择。</p><p><img src="media/09674bdf54cabc177dd52ae7e6510db6.png" alt=""></p><p>图6.2</p><p>3、这个面板上面的参数是选择服务器连接，这里就是要准备连接要发布的服务器。如果下拉菜单里没有选项，<br>那么点击右边的加号按钮。进行添加如图。之后选择连接以及服务名称进行下一步。</p><p><img src="media/de2f2314e6e2581aa71d574f96b02174.png" alt=""></p><p>图6.3</p><p><img src="media/f444a20127c20ccd35ff56904a3d0ed5.png" alt=""></p><p>图6.4</p><p><img src="media/6c1bd0111274f030e75b110cd2b0caa2.png" alt=""></p><p>图6.5</p><p>4、选择文件存放位置，如图所示。每个服务都可以放到一个文件夹下分类，如果没有文件夹可以重新创建一个。</p><p><img src="media/ef353da006c4c006711279cedc7c8dab.png" alt=""></p><p>图6.6</p><p>5、进入服务编辑面板，首先点击上面的</p><p><img src="media/e49c5f52d3789bae66da4f939534ad78.png" alt=""></p><p>工具进行检查。</p><p><img src="media/640381f990a0cde4f10fdd4512ab7b2d.png" alt=""></p><p>图6.7</p><p>这个面板负责勾选服务具有的属性，例如地图属性(Mapping)、WCS服务、WMS服务、Feature<br>Access服务（需要与数据库连接）等。根据需要进行选择。</p><p><img src="media/41bd3e63145cb6c4755918df13a4d018.png" alt=""></p><p>图6.8</p><p>6、进行瓦片规格设置，如图所示为缓存设置面板，用于切片服务的设置。根据图片上的提升，首先选择使用瓦片。之后在切片方案里面</p><p><img src="media/2c7db2c8b32db67ef7a2c94c098b9ed3.png" alt=""></p><p>选择我们已经准备好的切片方案加载</p><p><img src="media/0c2122dd4beb9346f8a3f110813d2c2f.png" alt=""></p><p>。之后根据数据需要在进行级别的选择。</p><p><img src="media/121e27d0f62b6cd6bbcc9a7245365e9d.png" alt=""></p><p>图6.9</p><p>7、在信息描述面板里面添加描述</p><p><img src="media/662ba81ed92627fb4b43173d4b61b933.png" alt=""></p><p>8、点击</p><p><img src="media/b9251a89dfe111a3db8a49fd5e2f33c2.png" alt=""></p><p>发布</p><h2 id="服务切片"><a href="#服务切片" class="headerlink" title="服务切片"></a>服务切片</h2><p>以上的步骤已经将一个服务发布到了ArcGIS<br>Server中，之后如果您刚才设置了瓦片切片，现在就需要切片。步骤如下：</p><p>1、打开ArcCatelog，寻找自己的刚才发布的服务。右键—>管理缓存进入管理切片对话框。</p><p><img src="media/5c29bf2fea524db1fcf8a06c7cc58503.png" alt=""></p><p>图7.1</p><p>2、如图所示为开始进行缓存的对话框。首先选择</p><p><img src="media/a5ee0008a069fe29b3eef177085f2a1e.png" alt=""></p><p>切片方式包括RECREATE_ALL_TILES（重新切片）、RECREATE_EMPTY_TILES（将空瓦片切片）、DELETE_TILES(删除瓦片)。三种根据需要进行选择。</p><p>3、之后确认其他参数无误，点击OK开始切片。右键点击</p><p><img src="media/ffe0a161e48f75534f622cdac17af49d.png" alt=""></p><p>可以查看缓存情况</p><p>。</p><p><img src="media/b7a0751d2a2f61d6f917943f4e97f11f.png" alt=""></p><p><img src="media/ab4ebfc0499de197522a3d50149bb5c8.png" alt=""></p><p>图7.2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ArcGIS地图发布与数据切片&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="ArcGIS" scheme="http://yatsov.github.io/tags/ArcGIS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS Server的跨域</title>
    <link href="http://yatsov.github.io/arcobject/ArcGIS%20Server%20%E7%9A%84%E8%B7%A8%E5%9F%9F%20.html"/>
    <id>http://yatsov.github.io/arcobject/ArcGIS Server 的跨域 .html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T11:10:16.765Z</updated>
    
    <content type="html"><![CDATA[<p>ArcGIS Server的跨域<br><a id="more"></a></p><h3 id="1-1-跨域的主要方式"><a href="#1-1-跨域的主要方式" class="headerlink" title="1.1 跨域的主要方式"></a>1.1 跨域的主要方式</h3><p>跨域方式主要有：1、jsoup 2、后台代理转接 3 CORS 4 windows.domain 设置为统一域名 5 windows.name 6 websocket</p><h3 id="1-2-tomcat的跨域设置"><a href="#1-2-tomcat的跨域设置" class="headerlink" title="1.2 tomcat的跨域设置"></a>1.2 tomcat的跨域设置</h3><p>在TOMCAT_HOME/conf/web.xml上的Web-APP 标签内即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt; </span><br><span class="line">      &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt; </span><br><span class="line">      &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt;       </span><br><span class="line">  &lt;init-param&gt; </span><br><span class="line">        &lt;param-name&gt;cors.allowed.origins&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;*&lt;/param-value&gt;       </span><br><span class="line">  &lt;/init-param&gt;       </span><br><span class="line">  &lt;init-param&gt; </span><br><span class="line">        &lt;param-name&gt;cors.allowed.methods&lt;/param-name&gt; </span><br><span class="line">        &lt;param-value&gt;GET,POST,HEAD,OPTIONS,PUT&lt;/param-value&gt;       </span><br><span class="line">&lt;/init-param&gt;       </span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">        &lt;param-name&gt;cors.allowed.headers&lt;/param-name&gt;         </span><br><span class="line">&lt;param-value&gt;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;       </span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">        &lt;param-name&gt;cors.exposed.headers&lt;/param-name&gt;         </span><br><span class="line">&lt;param-value&gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;       </span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">        &lt;param-name&gt;cors.support.credentials&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;       </span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">        &lt;param-name&gt;cors.preflight.maxage&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;10&lt;/param-value&gt;       </span><br><span class="line">&lt;/init-param&gt;     </span><br><span class="line">&lt;/filter&gt; </span><br><span class="line">&lt;filter-mapping&gt; </span><br><span class="line">    &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt; </span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></p><h3 id="1-3-ArcGIS-的tomcat的目录"><a href="#1-3-ArcGIS-的tomcat的目录" class="headerlink" title="1.3 ArcGIS 的tomcat的目录"></a>1.3 ArcGIS 的tomcat的目录</h3><p>&lt;ARCGIS_SERVER_HOME&gt;\framework\runtime\tomcat</p><h3 id="1-4-ArcGIS10-2-的CORS支持情况"><a href="#1-4-ArcGIS10-2-的CORS支持情况" class="headerlink" title="1.4 ArcGIS10.2 的CORS支持情况"></a>1.4 ArcGIS10.2 的CORS支持情况</h3><p>ArcGIS10.2 是支持CORS跨域的,如果你想操作ArcGIS Server 的API 只需要申请一个Token即可。</p><h3 id="1-5-JS示例"><a href="#1-5-JS示例" class="headerlink" title="1.5 JS示例"></a>1.5 JS示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function init() &#123;</span><br><span class="line">       $.ajax(&#123;  </span><br><span class="line">           type: &apos;post&apos;,  </span><br><span class="line">           crossDomain: true,  </span><br><span class="line">           url: &apos;http://localhost:6080/arcgis/admin/services/ShengYang/SYaccident.MapServer/stop?token=S_F4FXH9JTcnvUiJVITeoNj_NdmeGUHfSoi2rqsRvuYaQQbbbiF5Fwk7HiWI9ruJ&apos;,  </span><br><span class="line">           data: &#123;  </span><br><span class="line">               f:&apos;json&apos;,</span><br><span class="line">           </span><br><span class="line">           &#125;,  </span><br><span class="line">           dataType:&apos;json&apos;,  </span><br><span class="line">           xhrFields: &#123;  </span><br><span class="line">               &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;</span><br><span class="line">           &#125;,  </span><br><span class="line">           success: function(data, textStatus, jqXHR)&#123;  </span><br><span class="line">               // console.log(&quot;getAllResponseHeaders:&quot;+jqXHR.getAllResponseHeaders());  </span><br><span class="line">               console.dir(data);  </span><br><span class="line">               // Backbone.history.navigate(&quot;#booklist&quot;,true);  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ArcGIS Server的跨域&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="ArcGIS" scheme="http://yatsov.github.io/tags/ArcGIS/"/>
    
  </entry>
  
  <entry>
    <title>git 基础命令使用笔记</title>
    <link href="http://yatsov.github.io/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yatsov.github.io/git基础命令笔记.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T07:07:54.611Z</updated>
    
    <content type="html"><![CDATA[<p>此处为对git使用的一个笔记记录，包括基本使用方法，命令，服务器组建。<br>当年林纳斯大神为了控制Linux的源代码信手撸来，诞生了这个出色的版本管理工具。<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>此处为对git使用的一个笔记记录，包括基本使用方法，命令，服务器组建。<br>当年林纳斯大神为了控制Linux的源代码信手撸来，诞生了这个出色的版本管理工具。</p><blockquote><p>注：git只能对普通文件进行管理，二进制文件无法做到修改的版本管理只能追踪更新。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>windows版本的git安装非常简单下载安装包按照下一步一步步来即可。<br>安装完毕之后需要设置你的用户名和你使用的邮箱</p><pre><code>git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot;--global 参数代表全局使用变量</code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h4 id="初始化一个空的仓库（Git-repository）"><a href="#初始化一个空的仓库（Git-repository）" class="headerlink" title="初始化一个空的仓库（Git repository）"></a>初始化一个空的仓库（Git repository）</h4><blockquote><p>git init </p></blockquote><h4 id="添加一次修改"><a href="#添加一次修改" class="headerlink" title="添加一次修改"></a>添加一次修改</h4><p>第一步 告诉git将一个文件添加进仓库</p><blockquote><p>1 git add . 或者git add <file>(即单个文件)<br>第二步 将文件提交到仓库<br>2 git commit -m “wrote a readme file”<br>-m是说明后面一定要写有意义的东西</file></p></blockquote><h4 id="掌握工作区的状态"><a href="#掌握工作区的状态" class="headerlink" title="掌握工作区的状态"></a>掌握工作区的状态</h4><blockquote><p>git status</p></blockquote><h4 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h4><blockquote><p>git diff readme.txt</p></blockquote><h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><h4 id="回退到上一个版本"><a href="#回退到上一个版本" class="headerlink" title="回退到上一个版本"></a>回退到上一个版本</h4><blockquote><p>git reset –hard commit_id。<br>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令</p></blockquote><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><blockquote><p>git log<br>以便确定要回退到哪个版本。</p></blockquote><h4 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h4><blockquote><p>git reflog<br>以便确定要回到操作回退之后的哪个版本。</p></blockquote><p>###丢弃修改</p><p>####丢弃工作区的修改</p><blockquote><p>git  checkout – file</p></blockquote><h4 id="撤销暂存区修改"><a href="#撤销暂存区修改" class="headerlink" title="撤销暂存区修改"></a>撤销暂存区修改</h4><blockquote><p>git reset HEAD file</p></blockquote><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><blockquote><p>git rm<br>可以恢复到最新版本但是会丢失最近一次的修改内容。</p></blockquote><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><blockquote><p>git remote add origin(这里是远程仓库名称) <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:miao/learngit.git</p></blockquote><h4 id="推送到远程分支"><a href="#推送到远程分支" class="headerlink" title="推送到远程分支"></a>推送到远程分支</h4><blockquote><p>git push -u origin master<br>-u用于将本地master分支与远程分支关联起来,第一次之后就没有推送的必要了。</p></blockquote><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><blockquote><p>git clone url<br>将远程仓库克隆下来</p></blockquote><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建分支并切换到分支"><a href="#创建分支并切换到分支" class="headerlink" title="创建分支并切换到分支"></a>创建分支并切换到分支</h4><blockquote><p>git checkout -b dev</p></blockquote><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><blockquote><p>git branch</p></blockquote><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><blockquote><p>git checkout master</p></blockquote><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><blockquote><p>git merge dev</p></blockquote><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><blockquote><p>git branch -d dev</p></blockquote><h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><blockquote><p>git log –graph</p></blockquote><h4 id="禁用fast-forward模式合并分支"><a href="#禁用fast-forward模式合并分支" class="headerlink" title="禁用fast forward模式合并分支"></a>禁用fast forward模式合并分支</h4><blockquote><p>git merge –no-ff -m “merge with no-ff” dev</p></blockquote><h4 id="存储工作现场"><a href="#存储工作现场" class="headerlink" title="存储工作现场"></a>存储工作现场</h4><blockquote><p>git stash存储工作现场<br>git stash pop恢复并删除存储内容<br>git stash apply 恢复但是并不删除内容<br>git stash drop 删除存储的内容<br>git stash list 查看存储的内容</p></blockquote><h4 id="强行丢弃分支"><a href="#强行丢弃分支" class="headerlink" title="强行丢弃分支"></a>强行丢弃分支</h4><blockquote><p>git branch -D <name></name></p></blockquote><h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><blockquote><p>git remote -v</p></blockquote><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><blockquote><p>git push origin branch-name<br>如果推送失败则用git pull 抓取远程的新的提交</p></blockquote><h4 id="在本地创建与远程对应分支"><a href="#在本地创建与远程对应分支" class="headerlink" title="在本地创建与远程对应分支"></a>在本地创建与远程对应分支</h4><blockquote><p>git checkout -b branch-name origin/branch-name<br>本地和远程分支的名称最好一致</p></blockquote><h4 id="建立本地分支和远程分支的关联"><a href="#建立本地分支和远程分支的关联" class="headerlink" title="建立本地分支和远程分支的关联"></a>建立本地分支和远程分支的关联</h4><blockquote><p>git branch –set-upstream branch-name origin/branch-name</p></blockquote><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="创建新标签"><a href="#创建新标签" class="headerlink" title="创建新标签"></a>创建新标签</h4><blockquote><p>git tag <name></name></p></blockquote><h4 id="指定标签信息"><a href="#指定标签信息" class="headerlink" title="指定标签信息"></a>指定标签信息</h4><blockquote><p>git tag -a <tagname> -m “blablabla…”</tagname></p></blockquote><h4 id="可以用PGP签名标签"><a href="#可以用PGP签名标签" class="headerlink" title="可以用PGP签名标签"></a>可以用PGP签名标签</h4><blockquote><p>git tag -s <tagname> -m “blablabla…”</tagname></p></blockquote><h4 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h4><blockquote><p>git tag</p></blockquote><h4 id="推送一个本地标签"><a href="#推送一个本地标签" class="headerlink" title="推送一个本地标签"></a>推送一个本地标签</h4><blockquote><p>git push origin <tagname></tagname></p></blockquote><h4 id="推送全部未推送过的本地标签"><a href="#推送全部未推送过的本地标签" class="headerlink" title="推送全部未推送过的本地标签"></a>推送全部未推送过的本地标签</h4><blockquote><p>git push origin –tags</p></blockquote><h4 id="删除一个本地标签"><a href="#删除一个本地标签" class="headerlink" title="删除一个本地标签"></a>删除一个本地标签</h4><blockquote><p>git tag -d <tagname></tagname></p></blockquote><h4 id="删除一个远程标签"><a href="#删除一个远程标签" class="headerlink" title="删除一个远程标签"></a>删除一个远程标签</h4><blockquote><p>git push origin :refs/tags/<tagname></tagname></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此处为对git使用的一个笔记记录，包括基本使用方法，命令，服务器组建。&lt;br&gt;当年林纳斯大神为了控制Linux的源代码信手撸来，诞生了这个出色的版本管理工具。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yatsov.github.io/categories/tool/"/>
    
    
      <category term="git" scheme="http://yatsov.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MySQL复制即相关维护</title>
    <link href="http://yatsov.github.io/mysql/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html"/>
    <id>http://yatsov.github.io/mysql/MySQL主从复制.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T07:07:46.187Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL复制即相关维护<br><a id="more"></a></p><p>##　MySQL复制原理及简介</p><h3 id="1-复制的优点"><a href="#1-复制的优点" class="headerlink" title="1 复制的优点"></a>1 复制的优点</h3><blockquote><p>如果主库出现问题，可以快速切换到从库。<br>可以再从从库上执行查询操作，降低主库的访问压力。<br>可以在从库上实现备份，避免备份期间影响主库服务。</p></blockquote><h3 id="2-复制流程概述"><a href="#2-复制流程概述" class="headerlink" title="2 复制流程概述"></a>2 复制流程概述</h3><p>1 首先，MySQL主库在事务提交时会把数据变更作为时间Events记录在二进制日志文件Binlog中；MySQL主库上的sync_binlog控制binlog日志刷新到磁盘。  </p><blockquote><p>当这个值是0或者1 的时候这个延时是由binlog_group_commit_sync_delay（即磁盘上等待多长时间统一提交）指定的。而次数大于n的时候意思是每n此提交。源自MySQL5.7文档</p></blockquote><p>2 主库推送二进制日志文件Binlog中的事件到从库的中继日志Relay Log，之后从库根据中级日志重做数据变更操作，最终达到主从一直的目的。</p><p>3 MySQL通过三个线程来完成主从库之间的数据复制：Binlog Dump线程跑在主库上，I/O线程和SQL线程跑在从库上。当从库启动复制的时候，首先创建i/O线程连接主库，主库随后创建Binlog Dump线程读取数据库时间发送给I/O线程，I/O线程获取到事件数据后更新到中继日志中去，之后从库的SQL线程读取中继日志中的更新并运用。</p><blockquote><p>show processlist可以查看主库上的Binlog Dump线程<br>show slave status 可以查看从库复制状态</p></blockquote><h3 id="3-Binlog-三种复制方式"><a href="#3-Binlog-三种复制方式" class="headerlink" title="3 Binlog 三种复制方式"></a>3 Binlog 三种复制方式</h3><p>1、Statement基于SQL语句级别的Binlog，每条修改数据的SQL都会保存。<br>2、Row基于行级别，记录每一行数据的变化。不会因为存储过程或者触发器造成主从库不一致，但是记录日志量会比上一个大很多。<br>3、Mixed,混合Statement和Row模式默认情况下采用Statement模式某些情况下采用Row。</p><blockquote><p>使用binlog-format 变量记录,更改设置方法<br>set global binlog_format = ‘Row’如果没有global则是当前session。<br>show binlog events 可以查看Update操作在Binlog日志文件中对应的位置。</p></blockquote><h3 id="4-常见架构"><a href="#4-常见架构" class="headerlink" title="4 常见架构"></a>4 常见架构</h3><p>1 一主多从<br>2 多级复制 减小主机压力</p><blockquote><p>可以使用BLACKHOLE引擎来降低多级复制的延时，他的操作仅在Binlog里面记录。<br>3 双主架构，避免了从库的额外工作。</p></blockquote><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>1 首先尽量保证版本一致且版本最新。（我是5.6 5.7 成功但是还是建议版本号越近越新越好。)</p><p>2 在主库上设置使用账户给予REPLICATION SLAVE权限</p><blockquote><p>GRANT REPLICATION SLAVE ON <em>.</em> to ‘repl‘@’ip地址’ identified by ‘password’;</p></blockquote><p>3 修改主库上的my.cnf配置文件开启binlog设置server-id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server-id=1   //给数据库服务的唯一标识，一般为大家设置服务器Ip的末尾号</span><br><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br><span class="line">``` </span><br><span class="line">4 封住主库避免修改影响主从同步。</span><br><span class="line">&gt;flush tables with read lock;</span><br><span class="line"></span><br><span class="line">5 得到主库当前的二进制日志名和偏移量值。**并记录下来**</span><br><span class="line">&gt;show master status;</span><br><span class="line"></span><br><span class="line">6 主从复制保持同步。并解锁。</span><br><span class="line"></span><br><span class="line">7 配置从库</span><br></pre></td></tr></table></figure></p><p>server-id=2<br>relay-log-index=slave-relay-bin.index<br>relay-log=slave-relay-bin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 创建到主库的连接</span><br></pre></td></tr></table></figure></p><p>change master to master_host=’192.168.0.104’, //Master 服务器Ip<br>master_port=3306,<br>master_user=’repl’,<br>master_password=’mysql’,<br>master_log_file=’master-bin.000001’,//Master服务器产生的日志<br>master_log_pos=0;<br><code>`</code><br>9 在从库上启动slave线程</p><blockquote><p>start slave;</p></blockquote><p>10 之后就可以在主库上插入点数据看看啦~~~测试是否成功</p><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><p>log-slave-updates<br>用来配置从库的更新是否写入二进制文件，以便将其作为其他的主库。<br>master-connect-retry<br>用来设置和主库的连接丢失重试的时间间隔，默认是60s<br>read-only<br>只允许超级用户更新操作。<br>replicate0do-db、replicate-do-table、replicate-ignore-db、replicate-ignore-table<br>表示记录的表以及忽略的表在binlog中</p><h2 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h2><p>1、 查看从库状态</p><blockquote><p>show slave status<br>进程 Slave_IO_Running :从此进程负责的从库和主库上读取BINLOG日志，并写入从库上的中继日志。<br>进程 Slave_SQL_Running 此进程负责读取并执行中继日志中的binlog日志。</p></blockquote><p>2、主从同步维护<br>由于双机性能不同可能导致主从性能不同，同步不同。<br>1、主库上首先阻止读入。</p><blockquote><p>FLUSH TABLESWITH READ LOCK<br>2、在从库上使用MASTER_POS_WAIT()函数的参数是钱买步骤中得到的日志位置值。<br>select MASTER_POS_WAIT(‘日志名’,’位置值’)<br>这个日志会阻塞知道从库抵达该位置，返回0.如果返回-1则代表超时。<br>3、UNLOCK解锁。<br>UNLOCK TABLES</p></blockquote><p>3、复制出错<br>如果复制出现问题首先确认是不素食表结构不一致导致的，如果是则修改表结构到一致 。<br>如果不是那么是某一句话出现的问题可以采用忽略这句话，或者是不将其记录到log中在在从库中进行操作保证服主从同步。</p><p>4、查看从库复制进度<br>使用show processlist 列表中的Slave_SQL_Running 线程的time进行比较。<br>也可以用show slave status查看从库落后主库的事件。（Seconds_Behind_Master）<br>另外为了提高从库复制效率还可以将主库的数据库分别复制到不同的从库上分担性能。也就是一个数据库中只负责主库的几个数据库。</p><p>5、主从切换<br>1、首先确保所有的从库都已经执行了relay log中的全部更新，在每个从苦涩，执行STOP SLAVE IO_THREAD然后检查SHOW PROCESSLIST的输出知道状态都是 Has read all relay log。<br>2、在从库A1上，执行STOP SLAVE以停止服务，然后执行RESET MASTER以重置成主数据库；<br>3、在其余数据库上执行STOP SLAVE以停止服务，然后执行CHANGE MASTER TO MASTER_HOST =’S1’重新设置主库，在执行START SLAVE以启动复制。<br>4、通知所有的客户端将主库指向S1。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL复制即相关维护&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yatsov.github.io/categories/DB/"/>
    
    
      <category term="MySQL" scheme="http://yatsov.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>面试问题整理</title>
    <link href="http://yatsov.github.io/other/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86.html"/>
    <id>http://yatsov.github.io/other/面试问题整理.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-23T07:18:35.553Z</updated>
    
    <content type="html"><![CDATA[<p>面试问题整理<br><a id="more"></a></p><h1 id="面试问题整理"><a href="#面试问题整理" class="headerlink" title="面试问题整理"></a>面试问题整理</h1><h3 id="1-overflow-实现省略号"><a href="#1-overflow-实现省略号" class="headerlink" title="1 overflow 实现省略号"></a>1 overflow 实现省略号</h3><p>首先overflow的常用属性：visible/hidden/scroll/auto/inherit<br>white-space:pre/pre-wrap/nowrap/pre-line/inherit；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .ellipsis&#123;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p class=&quot;ellipsis&quot; style=&quot;width: 100px;&quot;&gt;111111111111111111111111111111111111111&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>注意上面的代码最重要的是text-overflow:ellipsis;</p><h3 id="2-如何水平垂直居中"><a href="#2-如何水平垂直居中" class="headerlink" title="2 如何水平垂直居中"></a>2 如何水平垂直居中</h3><p>1 flex<br>2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意外部是relative<br>3 table布局<br>4 margin :0;注外部必须是块级元素</p><h3 id="3-简述position每个项"><a href="#3-简述position每个项" class="headerlink" title="3 简述position每个项"></a>3 简述position每个项</h3><p>1、static（静态定位）：默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</p><p>2、relative（相对定位）：生成相对定位的元素，通过top,bottom,left,right的设置相对于其正常（原先本身）位置进行定位。可通过z-index进行层次分级。</p><blockquote><p>无论父级存在不存在，无论有没有TRBL，均是以父级的左上角进行定位，但是父级的Padding属性会对其影响。　　</p></blockquote><p>3、absolute（绝对定位）：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。可通过z-index进行层次分级。</p><p>4、fixed（固定定位）：生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。可通过z-index进行层次分级。</p><p>static与fixed的定位方式较好理解，在此不做分析。下面对应用的较多的relative和absolute进行分析：</p><h3 id="4-事件执行模型"><a href="#4-事件执行模型" class="headerlink" title="4 事件执行模型"></a>4 事件执行模型</h3><p>程序里面所有的任务，可以分成两类：同步任务（synchronous）和异步任务（asynchronous）。</p><p>同步任务是那些没有被引擎挂起、在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。</p><p>异步任务是那些被引擎放在一边，不进入主线程、而进入任务队列的任务。只有引擎认为某个异步任务可以执行了（比如 Ajax 操作从服务器得到了结果），该任务（采用回调函数的形式）才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有”堵塞“效应。</p><p>举例来说，Ajax 操作可以当作同步任务处理，也可以当作异步任务处理，由开发者决定。如果是同步任务，主线程就等着 Ajax 操作返回结果，再往下执行；如果是异步任务，主线程在发出 Ajax 请求以后，就直接往下执行，等到 Ajax 操作有了结果，主线程再执行对应的回调函数。</p><blockquote><p>注意主线程和任务队列，</p></blockquote><h3 id="5-settimeout-setinterval"><a href="#5-settimeout-setinterval" class="headerlink" title="5 settimeout setinterval"></a>5 settimeout setinterval</h3><blockquote><p><a href="https://m.jb51.net/article/99174.htm" target="_blank" rel="noopener">https://m.jb51.net/article/99174.htm</a></p></blockquote><h3 id="5-a-bind-b-bind-c-为什么后面绑定的是c-还没完全解决"><a href="#5-a-bind-b-bind-c-为什么后面绑定的是c-还没完全解决" class="headerlink" title="5 a.bind(b).bind(c)为什么后面绑定的是c 还没完全解决"></a>5 a.bind(b).bind(c)为什么后面绑定的是c 还没完全解决</h3><h3 id="6-promise的实现理解-这个要搞"><a href="#6-promise的实现理解-这个要搞" class="headerlink" title="6 promise的实现理解 这个要搞"></a>6 promise的实现理解 这个要搞</h3><h3 id="7-函数会返回一个默认的promise"><a href="#7-函数会返回一个默认的promise" class="headerlink" title="7 函数会返回一个默认的promise"></a>7 函数会返回一个默认的promise</h3><h3 id="8-位运算"><a href="#8-位运算" class="headerlink" title="8 位运算"></a>8 位运算</h3><p><a href="http://cn.mikecrm.com/httqqWJ" target="_blank" rel="noopener">http://cn.mikecrm.com/httqqWJ</a></p><pre><code>位运算即在比特级别进行操作的技术。使用位运算技术可以带来更快的运行速度与更小的内存使用。测试第 k 位：s &amp; (1 &lt;&lt; k);设置第k位：s |= (1 &lt;&lt; k);关闭第k位：s &amp;= ~(1 &lt;&lt; k);切换第k位：s ^= (1 &lt;&lt; k);乘以2的n方：s &lt;&lt; n;除以2的n方：s &gt;&gt; n;交集：s &amp; t;并集：s | t;减法：s &amp; ~t;提取最小非0位：s &amp; (-s);提取最小0位：~s &amp; (s + 1);交换值：x ^= y; y ^= x; x ^= y;</code></pre><h3 id="9-HTTP协议详解"><a href="#9-HTTP协议详解" class="headerlink" title="9 HTTP协议详解"></a>9 HTTP协议详解</h3><p><a href="http://blog.jobbole.com/108188/" target="_blank" rel="noopener">http://blog.jobbole.com/108188/</a></p><h3 id="10-基本类型和引用类型的区别"><a href="#10-基本类型和引用类型的区别" class="headerlink" title="10 基本类型和引用类型的区别"></a>10 基本类型和引用类型的区别</h3><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="二叉树序列化"><a href="#二叉树序列化" class="headerlink" title="二叉树序列化"></a>二叉树序列化</h3><p><a href="http://web.jobbole.com/94195/" target="_blank" rel="noopener">http://web.jobbole.com/94195/</a></p><h3 id="11-高并发处理"><a href="#11-高并发处理" class="headerlink" title="11 高并发处理"></a>11 高并发处理</h3><p>1、避免静态页面，与服务器交互，缓存<br>2、增加服务器资源</p><h3 id="12-权限设计"><a href="#12-权限设计" class="headerlink" title="12 权限设计"></a>12 权限设计</h3><h3 id="13-跨域"><a href="#13-跨域" class="headerlink" title="13 跨域"></a>13 跨域</h3><p>1 CORS</p><h3 id="14-null和undefined的区别"><a href="#14-null和undefined的区别" class="headerlink" title="14 null和undefined的区别"></a>14 null和undefined的区别</h3><p>null和undefined意思相近，null主要表示值为空，undefined表示变量未定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typeof null == &apos;object&apos;</span><br><span class="line">typeof undefined == &apos;undefined&apos;</span><br><span class="line">null==undefined // true</span><br><span class="line">null===undefined // false</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试问题整理&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yatsov.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yatsov.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的安装以及简要调优</title>
    <link href="http://yatsov.github.io/Tomcat/Tomcat%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%AE%80%E8%A6%81%E8%B0%83%E4%BC%98.html"/>
    <id>http://yatsov.github.io/Tomcat/Tomcat的安装以及简要调优.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T10:57:57.508Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat的安装以及简要调优<br><a id="more"></a></p><h1 id="1-Tomcat的安装"><a href="#1-Tomcat的安装" class="headerlink" title="1 Tomcat的安装"></a>1 Tomcat的安装</h1><p>文档主要介绍一个和多个Tomcat的安装、应用程序的部署以及常见问题解答。此处以Tomcat8为例但是现场请安装8.5。</p><h2 id="1-1-Tomcat的安装"><a href="#1-1-Tomcat的安装" class="headerlink" title="1.1 Tomcat的安装"></a><strong>1.1 Tomcat的安装</strong></h2><p>Tomcat使用免安装版，无需安装解压即可将压缩包解压到指定的路径。</p><h3 id="1-1-1-查看端口使用情况"><a href="#1-1-1-查看端口使用情况" class="headerlink" title="1.1.1 查看端口使用情况"></a>1.1.1 查看端口使用情况</h3><p>在命令窗口中使用“netstat -ano”查看端口使用情况，</p><p><img src="media/2449157b9f161a28356ebda0f7a8cc7d.png" alt=""></p><p>图4.1</p><h3 id="1-1-2-修改端口号"><a href="#1-1-2-修改端口号" class="headerlink" title="1.1.2 修改端口号"></a>1.1.2 修改端口号</h3><p>打开Tomcat-8\conf\server.xml文件，修改端口号,将Connector<br>port设置为使用的端口，防止端口被占用，</p><p><img src="media/4fee0738f3c228e0248eb29587387b9c.png" alt=""></p><p>图4.2</p><h3 id="1-1-3-设置管理员密码"><a href="#1-1-3-设置管理员密码" class="headerlink" title="1.1.3 设置管理员密码"></a>1.1.3 设置管理员密码</h3><p>设置管理员用户和密码会增加远程攻击可能性，所以本处只做学习说明，根据之后的需要调用。项目安装中不设置。</p><p>设置Tomcat管理员用户名和密码，打开Tomcat-8\conf\server.xml文件Tomcat-users.xml，增加下面代码，建议设置为<br>“admin”，</p><p>\&lt;role rolename=”manager-gui”/></p><p>\&lt;user username=”admin” password=”admin” roles=”manager-gui”/></p><p><img src="media/64ee5b20cfe2c4b761cdabb11173304e.png" alt=""></p><p>图4.3</p><h3 id="1-1-4-调整Tomcat内存大小"><a href="#1-1-4-调整Tomcat内存大小" class="headerlink" title="1.1.4 调整Tomcat内存大小"></a>1.1.4 调整Tomcat内存大小</h3><p>以编辑方式打开D:\apache-Tomcat-8\bin目录下的catalina.bat文件，在文件\@echo<br>off下，增加“set JAVA_OPTS=-server -Xms512m -Xmx1024m -XX:PermSize=512M<br>-XX:MaxPermSize=1024M”PermSize可以根据实际情况进行调整，可在一定程度上解除在中间件运行过程中发生内存溢出的异常。</p><p><img src="media/042485b028faae6ea95d027da1a3ac93.png" alt=""></p><p>图4.4</p><h3 id="1-1-5-启动Tomcat服务"><a href="#1-1-5-启动Tomcat服务" class="headerlink" title="1.1.5 启动Tomcat服务"></a>1.1.5 启动Tomcat服务</h3><p>找到文件夹打开Tomcat-8\bin\ startup.bat，双击启动，即可看到部署成功。</p><p><img src="media/7c0ae4cb550692c87cbcdc2460f426a2.png" alt=""></p><p>图4.5</p><p>也可以打开IE浏览器，在地址栏中输入：<a href="http://localhost:80/" target="_blank" rel="noopener">http://localhost:80/</a> <em>；其中<br>80为端口号，要看自己的实际设置。</em>出现如下图所示网页，即表明Tomcat安装成功。</p><p><img src="media/8162c1db6560f05cf26f83b11d475de7.png" alt=""></p><p>图4.6</p><h3 id="1-1-6-查看部署项目"><a href="#1-1-6-查看部署项目" class="headerlink" title="1.1.6 查看部署项目"></a>1.1.6 查看部署项目</h3><p>点击图中的的Manager App可查看部署的项目。</p><p><img src="media/c7cda158429f634f8ac477e2aae63a07.png" alt=""></p><p>图4.7</p><p>点击“Manager<br>App”，弹出用户名和密码界面，即在Tomcat-users.xml文件中设置的用户名和密码。</p><p><img src="media/5fce84dd33e72521b4e5dfc288eecbeb.png" alt=""></p><p>图4.8</p><p>输入用户名和密码，可查看部署的项目。</p><p><img src="media/7086694bb8d33a159638f33e4998b4c3.png" alt=""></p><p>图4.9</p><h3 id="1-1-7-开启GZIP压缩"><a href="#1-1-7-开启GZIP压缩" class="headerlink" title="1.1.7 开启GZIP压缩"></a>1.1.7 开启GZIP压缩</h3><p>在TOMCAT_HOME/conf/server.xml<br>中的找到如下Connector将compression改成on并修改其它属性致图片状。</p><p><img src="media/f9a39b5923862c72fe5d1927410aa9d9.png" alt=""></p><p>图4.10</p><h2 id="1-2-多个Tomcat的安装和配置"><a href="#1-2-多个Tomcat的安装和配置" class="headerlink" title="1.2 多个Tomcat的安装和配置"></a><strong>1.2 多个Tomcat的安装和配置</strong></h2><p>Tomcat可以作为一款绿色软件使用，单独安装或直接拷贝都可以完成Tomcat的部署，使用免安装版。</p><h3 id="1-2-1-拷贝"><a href="#1-2-1-拷贝" class="headerlink" title="1.2.1 拷贝"></a><strong>1.2.1 拷贝</strong></h3><p>免安装版的Tomcat可在同一个电脑上部署多个，将Tomcat-8文件下的所有子文件，复制到Tomcat-8082文件夹下，注意第一个Tomcat的配置不变，修改新增的Tomcat下一些参数。</p><h3 id="1-2-2-修改端口号"><a href="#1-2-2-修改端口号" class="headerlink" title="1.2.2 修改端口号"></a><strong>1.2.2 修改端口号</strong></h3><p>打开D:\ Tomcat-8082\conf目录下的server.xml文件，需要修改三个端口号：</p><ol><li>将之前的“80”端口修改为其他端口号，如“8082”：</li></ol><p><img src="media/b4314acae2c39bef62a04e31f613967e.png" alt=""></p><p>图4.11</p><ol><li>将之前的“8005”端口修改为其他端口号，如“8006”：</li></ol><p><img src="media/cb7f3c2c633529731dca6280b98124a9.png" alt=""></p><p>图4.12</p><ol><li>将之前的“8009”端口修改为其他端口号，如“8092”，8443这个端口不可更改。</li></ol><p><img src="media/a51869af04682dc2ff41e6734c1ad16c.png" alt=""></p><p>图4.13</p><h2 id="1-3-部署和移除应用程序"><a href="#1-3-部署和移除应用程序" class="headerlink" title="1.3 部署和移除应用程序"></a>1.3 部署和移除应用程序</h2><p>在Tomcat中部署和移除项目，共三种方法分别为：手动创建xml文件方式、控制台方式，直接拷贝应用程序到webapps下方式。</p><h3 id="1-3-1-手动创建xml文件方式（推荐）"><a href="#1-3-1-手动创建xml文件方式（推荐）" class="headerlink" title="1.3.1 手动创建xml文件方式（推荐）"></a><strong>1.3.1 手动创建xml文件方式（推荐）</strong></h3><p>对于免安装的Tomcat，并没有控制台功能，这种情况下，推荐采用手动创建xml文件方式来部署应用服务。</p><h4 id="1-3-1-1-部署"><a href="#1-3-1-1-部署" class="headerlink" title="1.3.1.1 部署"></a>1.3.1.1 部署</h4><p>在“D:\<br>Tomcat-8\conf\Catalina\localhost”下新建“文本文档”，重命名为SCMIS.xml，编辑SCMIS.xml，填充内容如下：</p><p>\&lt;?xml version=”1.0” encoding=”UTF-8”?></p><p>\&lt;Context</p><p>crossContext=”true” docBase=”E:\webapp\SCMIS” path=”/SCMIS”<br>reloadable=”true”></p><p>\&lt;/Context></p><p>图4.14</p><p>其中，docBase的值为web应用程序所在文件路径（文中红色字体），path的值为web应用程序的名称（文中红色字体）。</p><h4 id="1-3-1-2-移除"><a href="#1-3-1-2-移除" class="headerlink" title="1.3.1.2 移除"></a>1.3.1.2 移除</h4><p>如果不想启动SCMIS应用服务，只要将“D:\<br>Tomcat-8\conf\Catalina\localhost”下对应的SCMIS.xml文件删除即可。</p><h3 id="1-3-2-直接拷贝应用程序到webapps下方式"><a href="#1-3-2-直接拷贝应用程序到webapps下方式" class="headerlink" title="1.3.2 直接拷贝应用程序到webapps下方式"></a><strong>1.3.2 直接拷贝应用程序到webapps下方式</strong></h3><h4 id="1-3-2-1部署"><a href="#1-3-2-1部署" class="headerlink" title="1.3.2.1部署"></a>1.3.2.1部署</h4><p>直接将web应用程序拷贝到“D:\Tomcat-8\webapps\”下即可。</p><h4 id="1-3-2-2-移除"><a href="#1-3-2-2-移除" class="headerlink" title="1.3.2.2 移除"></a>1.3.2.2 移除</h4><p>如果想不启动SCMIS应用服务，将web应用程序从“D:\ Tomcat-8\webapps\”下删除即可。</p><h2 id="1-4-FAQ"><a href="#1-4-FAQ" class="headerlink" title="1.4 FAQ"></a>1.4 FAQ</h2><h3 id="1-4-1为Tomcat增加Title"><a href="#1-4-1为Tomcat增加Title" class="headerlink" title="1.4.1为Tomcat增加Title"></a><strong>1.4.1为Tomcat增加Title</strong></h3><p>由于现场在实际使用中，可能会在同一台服务器上同时启动多个Tomcat，很容易搞混淆,因此为Tomcat增加Title便于识别当前启动的是什么系统。</p><p>在Tomcat安装目录D:\<br>Tomcat-8\bin中，找到catalina.bat文件并打开，打开搜索框，搜索‘TITLE’找到如下位置，参照下面图片进行修改，注意：第二个红框要加引号</p><p><img src="media/ee7b26087d125b461e5b4168687ca745.png" alt=""></p><p>图4.15</p><p>修改后的效果，如下图所示;</p><p><img src="media/a6eb4c038bb86783fbc2c484efaeba8a.png" alt=""></p><p>图4.16</p><h3 id="1-4-2-Tomcat启动时一闪而过"><a href="#1-4-2-Tomcat启动时一闪而过" class="headerlink" title="1.4.2 Tomcat启动时一闪而过"></a><strong>1.4.2 Tomcat启动时一闪而过</strong></h3><p>解决方法有三种：</p><ol><li><p>环境变量设置不对，先检查环境变量是否设置完全正确了；</p></li><li><p>环境变量检查完全正确的情况下，在startup.bat文件的最后面,换行加上pause；然后再启动看下报错信息</p></li></ol><p><img src="media/6d66f9986175e044e5c05e81dc459a93.png" alt=""></p><p>图4.17</p><ol><li>如果以上方法设置后，还是一闪而过，则找到startup.bat倒数几行的位置；</li></ol><p><img src="media/6ba9ede25ba835612c37507ecf08a226.png" alt=""></p><p>图4.18</p><p>将start修改为run,如下，再启动Tomcat，注意：使用第三种方法知道了错误原因后，则务必将run修改回start。</p><p><img src="media/af6655bd1a411cd775fe41f28e4103fb.png" alt=""></p><p>图4.19</p><h3 id="1-4-3-启动Tomcat失败"><a href="#1-4-3-启动Tomcat失败" class="headerlink" title="1.4.3 启动Tomcat失败"></a><strong>1.4.3 启动Tomcat失败</strong></h3><p>启动Tomcat失败，错误信息如下：“java.lang.OutOfMemoryErrorthrownfromtheUncaughtExceptionHandler<br>in thread “startQuertz_QuartzSchedulerThread”</p><p>失败原因是内存溢出，解决办法参考4.1.4 调整Tomcat内存大小。</p><h3 id="1-4-4-SCMIS项目Running值是false"><a href="#1-4-4-SCMIS项目Running值是false" class="headerlink" title="1.4.4 SCMIS项目Running值是false"></a><strong>1.4.4 SCMIS项目Running值是false</strong></h3><p>Tomcat中Manager app中SCMIS<br>Running值是false，在onf\Catalina\localhost下新建SCMIS.xml时，Tomcat服务应该关闭。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat的安装以及简要调优&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yatsov.github.io/categories/server/"/>
    
    
      <category term="Tomcat" scheme="http://yatsov.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>关于ArcGIS如何点转线</title>
    <link href="http://yatsov.github.io/arcobject/ArcGIS%E7%82%B9%E4%B8%93%E7%BA%BF.html"/>
    <id>http://yatsov.github.io/arcobject/ArcGIS点专线.html</id>
    <published>2018-04-21T02:52:07.000Z</published>
    <updated>2018-04-21T11:10:39.621Z</updated>
    
    <content type="html"><![CDATA[<p>关于ArcGIS如何点转线<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>我们将Excel数据导入ArcGIS之后都是以点的形式存在的，但是如果这些点是轨迹怎么办?那么就需要将点转换为轨迹。下面介绍步骤。</p><h2 id="1-导入数据"><a href="#1-导入数据" class="headerlink" title="1 导入数据"></a>1 导入数据</h2><p>首先将Excel导入，再次之前要进行数据整备，将飘出的点剔除，否则会出现大连线效果。非常难看。另外ArcGIS如果出现xlxs导入失败的情况请换成xls。</p><h2 id="2-使用Points-to-line工具"><a href="#2-使用Points-to-line工具" class="headerlink" title="2 使用Points to line工具"></a>2 使用Points to line工具</h2><p><img src="/img/2/1.png" alt="">;<br>打开Points to line 工具,如图</p><p><img src="/img/2/2.png" alt="">;</p><p>Input Feature :代表输入要素，从GDB中选择。</p><p>OutPut Feature Class :代表输出要素，放入GDB中。</p><p>Line Field :代表判断每条线的字段。</p><p>SortField :代表判断每条单独的线的顺序的字段。</p><h2 id="3-完成"><a href="#3-完成" class="headerlink" title="3 完成"></a>3 完成</h2><p>点击 OK工作就完成啦~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于ArcGIS如何点转线&lt;br&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://yatsov.github.io/categories/GIS/"/>
    
    
      <category term="ArcGIS" scheme="http://yatsov.github.io/tags/ArcGIS/"/>
    
  </entry>
  
</feed>
